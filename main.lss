
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000032b0  00003344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000209  00800166  00800166  000033aa  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  000033aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006ef  00000000  00000000  000034ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021e2  00000000  00000000  00003bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b63  00000000  00000000  00005d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c90  00000000  00000000  000068fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  00008590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000815  00000000  00000000  00008a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021a4  00000000  00000000  00009225  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__ctors_end>
       4:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
       8:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
       c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      10:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      14:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      18:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      1c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      20:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      24:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      28:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      2c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      30:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      34:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      38:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      3c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      40:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      44:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      48:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      4c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      50:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      54:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      58:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      5c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      60:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>
      64:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__bad_interrupt>

00000068 <batman>:
	...
      c4:	80 c0 c0 e0 e0 f0 f0 f8 f8 f8 fc fc fe fe fe ff     ................
      d4:	ff ff ff e7 83 01 01 00 00 00 00 00 00 80 c0 fe     ................
      e4:	fc f8 f8 fc fe c0 80 00 00 00 00 00 00 01 01 83     ................
      f4:	e7 ff ff ff ff fe fe fe fc fc f8 f8 f8 f0 f0 e0     ................
     104:	e0 c0 c0 80 00 00 00 00 00 00 00 00 c0 e0 70 78     ..............px
     114:	3c 3e 3f 3f 3f 3f 3f 3f 7f 7f ff ff ff ff ff ff     <>??????........
     124:	ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe fe     ................
     134:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
     144:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     154:	ff ff 7f 7f 3f 3f 3f 3f 3f 3f 3e 3c 78 70 e0 c0     ....??????><xp..
	...
     170:	00 00 00 01 03 0f 3f 7f 3f 3f 1f 1f 0f 0f 0f 0f     ......?.??......
     180:	0f 1f 1f 1f 3f 3f 7f ff ff ff ff ff ff ff ff ff     ....??..........
     190:	ff ff ff ff ff 7f 3f 3f 1f 1f 1f 0f 0f 0f 0f 1f     ......??........
     1a0:	1f 1f 3f 3f 7f 3f 0f 03 01 00 00 00 00 00 00 00     ..??.?..........
	...
     1dc:	01 03 07 0f 3f ff ff 3f 0f 07 03 01 00 00 00 00     ....?..?........
	...
     234:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000260 <bmp_oslogo>:
	...
     290:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     2a0:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     308:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     318:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     328:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     384:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     394:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3b4:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     404:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     414:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     424:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     434:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     484:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     494:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     4a4:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4b4:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     504:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     514:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     534:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     588:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     598:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     5a8:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     614:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     624:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000660 <font_Earthbound_12x19_48to57>:
     660:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     670:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     680:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     690:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     6a0:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     6b0:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6c0:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6d0:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6e0:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6f0:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     700:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     710:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     720:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     730:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     740:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     750:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     760:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     770:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     780:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     790:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     7a0:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     7b0:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7c0:	01 01 01 00 00 00 00 00                             ........

000007c8 <Font5x7>:
     7c8:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7d8:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7e8:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7f8:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     808:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     818:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     828:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     838:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     848:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     858:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     868:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     878:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     888:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     898:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     8a8:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8b8:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8c8:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8d8:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8e8:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8f8:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     908:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     918:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     928:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     938:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     948:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     958:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     968:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     978:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     988:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     998:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

000009a8 <Liberation_Sans15x21_Numbers>:
     9a8:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9b8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9d4:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9e4:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     a04:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     a14:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a24:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a34:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a44:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a54:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a64:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a74:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a84:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a94:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     aa4:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     ab4:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     ac4:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     ad4:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     ae4:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     af4:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     b04:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     b14:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b24:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b34:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b44:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b54:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b64:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b74:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b84:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b94:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     ba4:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     bb4:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bc4:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bd0 <__ctors_end>:
     bd0:	11 24       	eor	r1, r1
     bd2:	1f be       	out	0x3f, r1	; 63
     bd4:	cf ef       	ldi	r28, 0xFF	; 255
     bd6:	d8 e0       	ldi	r29, 0x08	; 8
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	cd bf       	out	0x3d, r28	; 61

00000bdc <__do_copy_data>:
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b1 e0       	ldi	r27, 0x01	; 1
     be2:	e0 eb       	ldi	r30, 0xB0	; 176
     be4:	f2 e3       	ldi	r31, 0x32	; 50
     be6:	02 c0       	rjmp	.+4      	; 0xbec <.do_copy_data_start>

00000be8 <.do_copy_data_loop>:
     be8:	05 90       	lpm	r0, Z+
     bea:	0d 92       	st	X+, r0

00000bec <.do_copy_data_start>:
     bec:	a6 36       	cpi	r26, 0x66	; 102
     bee:	b1 07       	cpc	r27, r17
     bf0:	d9 f7       	brne	.-10     	; 0xbe8 <.do_copy_data_loop>

00000bf2 <__do_clear_bss>:
     bf2:	13 e0       	ldi	r17, 0x03	; 3
     bf4:	a6 e6       	ldi	r26, 0x66	; 102
     bf6:	b1 e0       	ldi	r27, 0x01	; 1
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <.do_clear_bss_start>

00000bfa <.do_clear_bss_loop>:
     bfa:	1d 92       	st	X+, r1

00000bfc <.do_clear_bss_start>:
     bfc:	af 36       	cpi	r26, 0x6F	; 111
     bfe:	b1 07       	cpc	r27, r17
     c00:	e1 f7       	brne	.-8      	; 0xbfa <.do_clear_bss_loop>
     c02:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
     c06:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <_exit>

00000c0a <__bad_interrupt>:
     c0a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c0e <main>:
}//end of main

static void setup(void)
{
	/* Set up glcd, also sets up SPI and relevent GPIO pins */
	glcd_init();
     c0e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <glcd_init>
int main(void)
{	
	
	setup();
	
	glcd_clear();
     c12:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
	glcd_write();
     c16:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
	
	state=1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 67 01 	sts	0x0167, r24
	
		
	while(1) 
	{
		switch(state)
     c20:	80 91 67 01 	lds	r24, 0x0167
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	d9 f0       	breq	.+54     	; 0xc5e <main+0x50>
     c28:	85 30       	cpi	r24, 0x05	; 5
     c2a:	38 f4       	brcc	.+14     	; 0xc3a <main+0x2c>
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	89 f0       	breq	.+34     	; 0xc52 <main+0x44>
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	90 f4       	brcc	.+36     	; 0xc58 <main+0x4a>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	b1 f7       	brne	.-20     	; 0xc24 <main+0x16>
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <main+0x3e>
     c3a:	86 30       	cpi	r24, 0x06	; 6
     c3c:	b1 f0       	breq	.+44     	; 0xc6a <main+0x5c>
     c3e:	86 30       	cpi	r24, 0x06	; 6
     c40:	88 f0       	brcs	.+34     	; 0xc64 <main+0x56>
     c42:	87 30       	cpi	r24, 0x07	; 7
     c44:	a9 f0       	breq	.+42     	; 0xc70 <main+0x62>
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	69 f7       	brne	.-38     	; 0xc24 <main+0x16>
     c4a:	15 c0       	rjmp	.+42     	; 0xc76 <main+0x68>
		{
			case 1:	glcd_test_circles();
     c4c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <glcd_test_circles>
     c50:	e7 cf       	rjmp	.-50     	; 0xc20 <main+0x12>
					break;
			case 2:	glcd_test_counter_and_graph();
     c52:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <glcd_test_counter_and_graph>
     c56:	e4 cf       	rjmp	.-56     	; 0xc20 <main+0x12>
					break;
			case 3:	glcd_test_text_up_down();
     c58:	0e 94 29 11 	call	0x2252	; 0x2252 <glcd_test_text_up_down>
     c5c:	e1 cf       	rjmp	.-62     	; 0xc20 <main+0x12>
					break;
			case 4:	glcd_test_tiny_text();
     c5e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <glcd_test_tiny_text>
     c62:	de cf       	rjmp	.-68     	; 0xc20 <main+0x12>
					break;
			case 5:	glcd_test_hello_world();
     c64:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <glcd_test_hello_world>
     c68:	db cf       	rjmp	.-74     	; 0xc20 <main+0x12>
					break;
			case 6:	glcd_test_rectangles();
     c6a:	0e 94 0b 10 	call	0x2016	; 0x2016 <glcd_test_rectangles>
     c6e:	d8 cf       	rjmp	.-80     	; 0xc20 <main+0x12>
					break;
			case 7:	glcd_test_scrolling_graph();
     c70:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <glcd_test_scrolling_graph>
     c74:	d5 cf       	rjmp	.-86     	; 0xc20 <main+0x12>
					break;
			case 8: glcd_draw_bitmap(batman);
     c76:	88 e6       	ldi	r24, 0x68	; 104
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 b6 0b 	call	0x176c	; 0x176c <glcd_draw_bitmap>
					glcd_write();
     c7e:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
     c82:	ce cf       	rjmp	.-100    	; 0xc20 <main+0x12>

00000c84 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
     c84:	98 2f       	mov	r25, r24
     c86:	84 35       	cpi	r24, 0x54	; 84
     c88:	08 f0       	brcs	.+2      	; 0xc8c <glcd_update_bbox+0x8>
     c8a:	93 e5       	ldi	r25, 0x53	; 83
     c8c:	44 35       	cpi	r20, 0x54	; 84
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <glcd_update_bbox+0xe>
     c90:	43 e5       	ldi	r20, 0x53	; 83
     c92:	60 33       	cpi	r22, 0x30	; 48
     c94:	08 f0       	brcs	.+2      	; 0xc98 <glcd_update_bbox+0x14>
     c96:	6f e2       	ldi	r22, 0x2F	; 47
     c98:	20 33       	cpi	r18, 0x30	; 48
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <glcd_update_bbox+0x1a>
     c9c:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     c9e:	e0 91 66 03 	lds	r30, 0x0366
     ca2:	f0 91 67 03 	lds	r31, 0x0367
     ca6:	80 81       	ld	r24, Z
     ca8:	98 17       	cp	r25, r24
     caa:	08 f4       	brcc	.+2      	; 0xcae <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
     cac:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	84 17       	cp	r24, r20
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
     cb4:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	68 17       	cp	r22, r24
     cba:	08 f4       	brcc	.+2      	; 0xcbe <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
     cbc:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     cbe:	83 81       	ldd	r24, Z+3	; 0x03
     cc0:	82 17       	cp	r24, r18
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
     cc4:	23 83       	std	Z+3, r18	; 0x03
     cc6:	08 95       	ret

00000cc8 <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     cc8:	e0 91 66 03 	lds	r30, 0x0366
     ccc:	f0 91 67 03 	lds	r31, 0x0367
     cd0:	83 e5       	ldi	r24, 0x53	; 83
     cd2:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     cd4:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     cd6:	8f e2       	ldi	r24, 0x2F	; 47
     cd8:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     cda:	13 82       	std	Z+3, r1	; 0x03
}
     cdc:	08 95       	ret

00000cde <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     cde:	e0 91 66 03 	lds	r30, 0x0366
     ce2:	f0 91 67 03 	lds	r31, 0x0367
     ce6:	83 e5       	ldi	r24, 0x53	; 83
     ce8:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     cea:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     cec:	8f e2       	ldi	r24, 0x2F	; 47
     cee:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     cf0:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
     cf2:	08 95       	ret

00000cf4 <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
     cf4:	e0 91 66 03 	lds	r30, 0x0366
     cf8:	f0 91 67 03 	lds	r31, 0x0367
     cfc:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
     cfe:	83 e5       	ldi	r24, 0x53	; 83
     d00:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
     d02:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
     d04:	8f e2       	ldi	r24, 0x2F	; 47
     d06:	83 83       	std	Z+3, r24	; 0x03
}
     d08:	08 95       	ret

00000d0a <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
     d0a:	90 93 65 03 	sts	0x0365, r25
     d0e:	80 93 64 03 	sts	0x0364, r24
	glcd_bbox_selected = bbox;
     d12:	70 93 67 03 	sts	0x0367, r23
     d16:	60 93 66 03 	sts	0x0366, r22
}
     d1a:	08 95       	ret

00000d1c <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
     d1c:	08 95       	ret

00000d1e <glcd_scroll_line>:

void glcd_scroll_line(void)
{
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     d26:	64 e5       	ldi	r22, 0x54	; 84
     d28:	80 91 64 03 	lds	r24, 0x0364
     d2c:	90 91 65 03 	lds	r25, 0x0365
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
     d30:	45 30       	cpi	r20, 0x05	; 5
     d32:	51 05       	cpc	r21, r1
     d34:	81 f0       	breq	.+32     	; 0xd56 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
     d36:	dc 01       	movw	r26, r24
     d38:	a2 0f       	add	r26, r18
     d3a:	b3 1f       	adc	r27, r19
     d3c:	2c 5a       	subi	r18, 0xAC	; 172
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	fc 01       	movw	r30, r24
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	24 55       	subi	r18, 0x54	; 84
     d48:	30 40       	sbci	r19, 0x00	; 0
     d4a:	84 e5       	ldi	r24, 0x54	; 84
     d4c:	01 90       	ld	r0, Z+
     d4e:	0d 92       	st	X+, r0
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	e1 f7       	brne	.-8      	; 0xd4c <glcd_scroll_line+0x2e>
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     d56:	8c 55       	subi	r24, 0x5C	; 92
     d58:	9e 4f       	sbci	r25, 0xFE	; 254
     d5a:	dc 01       	movw	r26, r24
     d5c:	86 2f       	mov	r24, r22
     d5e:	1d 92       	st	X+, r1
     d60:	8a 95       	dec	r24
     d62:	e9 f7       	brne	.-6      	; 0xd5e <glcd_scroll_line+0x40>
     d64:	4f 5f       	subi	r20, 0xFF	; 255
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	2c 5a       	subi	r18, 0xAC	; 172
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
     d6c:	46 30       	cpi	r20, 0x06	; 6
     d6e:	51 05       	cpc	r21, r1
     d70:	d9 f6       	brne	.-74     	; 0xd28 <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	43 e5       	ldi	r20, 0x53	; 83
     d78:	2f e2       	ldi	r18, 0x2F	; 47
     d7a:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
}
     d7e:	08 95       	ret

00000d80 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     d80:	e0 91 64 03 	lds	r30, 0x0364
     d84:	f0 91 65 03 	lds	r31, 0x0365
     d88:	88 ef       	ldi	r24, 0xF8	; 248
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	df 01       	movw	r26, r30
     d8e:	9c 01       	movw	r18, r24
     d90:	1d 92       	st	X+, r1
     d92:	21 50       	subi	r18, 0x01	; 1
     d94:	30 40       	sbci	r19, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	43 e5       	ldi	r20, 0x53	; 83
     d9e:	2f e2       	ldi	r18, 0x2F	; 47
     da0:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
}
     da4:	08 95       	ret

00000da6 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     da6:	e0 91 64 03 	lds	r30, 0x0364
     daa:	f0 91 65 03 	lds	r31, 0x0365
     dae:	88 ef       	ldi	r24, 0xF8	; 248
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	df 01       	movw	r26, r30
     db4:	9c 01       	movw	r18, r24
     db6:	1d 92       	st	X+, r1
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	30 40       	sbci	r19, 0x00	; 0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	43 e5       	ldi	r20, 0x53	; 83
     dc4:	2f e2       	ldi	r18, 0x2F	; 47
     dc6:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	glcd_write();
     dca:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
}
     dce:	08 95       	ret

00000dd0 <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
     dd0:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
     dd2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
     dd4:	0d b4       	in	r0, 0x2d	; 45
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
     dda:	28 9a       	sbi	0x05, 0	; 5
}
     ddc:	08 95       	ret

00000dde <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
     dde:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
     de0:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	80 ea       	ldi	r24, 0xA0	; 160
     de4:	9f e0       	ldi	r25, 0x0F	; 15
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
     dea:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
     dec:	28 9a       	sbi	0x05, 0	; 5
}
     dee:	08 95       	ret

00000df0 <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
     df0:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
     df2:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
     df4:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
     df6:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
     df8:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
     dfa:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
     dfc:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
     dfe:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
     e00:	80 e5       	ldi	r24, 0x50	; 80
     e02:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
     e04:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
     e06:	0e 94 16 07 	call	0xe2c	; 0xe2c <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
     e0a:	8c e6       	ldi	r24, 0x6C	; 108
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	68 e6       	ldi	r22, 0x68	; 104
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	0e 94 85 06 	call	0xd0a	; 0xd0a <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
     e16:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
     e1a:	08 95       	ret

00000e1c <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
     e1c:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
     e1e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <glcd_spi_write>
}
     e22:	08 95       	ret

00000e24 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
     e24:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
     e26:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <glcd_spi_write>
}
     e2a:	08 95       	ret

00000e2c <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
     e2c:	0e 94 ef 06 	call	0xdde	; 0xdde <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
     e30:	81 e2       	ldi	r24, 0x21	; 33
     e32:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
     e36:	82 e1       	ldi	r24, 0x12	; 18
     e38:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
     e3c:	8c eb       	ldi	r24, 0xBC	; 188
     e3e:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
     e42:	80 e2       	ldi	r24, 0x20	; 32
     e44:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     e4e:	08 95       	ret

00000e50 <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     e66:	e0 91 66 03 	lds	r30, 0x0366
     e6a:	f0 91 67 03 	lds	r31, 0x0367
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     e6e:	88 e0       	ldi	r24, 0x08	; 8
     e70:	e8 2e       	mov	r14, r24
     e72:	f1 2c       	mov	r15, r1
     e74:	e2 0e       	add	r14, r18
     e76:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     e78:	81 81       	ldd	r24, Z+1	; 0x01
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	8e 15       	cp	r24, r14
     e7e:	9f 05       	cpc	r25, r15
     e80:	54 f5       	brge	.+84     	; 0xed6 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	64 f1       	brlt	.+88     	; 0xee4 <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
     e8c:	80 2f       	mov	r24, r16
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
     e94:	e0 91 66 03 	lds	r30, 0x0366
     e98:	f0 91 67 03 	lds	r31, 0x0367
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
     ea4:	e0 91 66 03 	lds	r30, 0x0366
     ea8:	f0 91 67 03 	lds	r31, 0x0367
     eac:	10 81       	ld	r17, Z
     eae:	0c c0       	rjmp	.+24     	; 0xec8 <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
     eb0:	e0 91 64 03 	lds	r30, 0x0364
     eb4:	f0 91 65 03 	lds	r31, 0x0365
     eb8:	ec 0f       	add	r30, r28
     eba:	fd 1f       	adc	r31, r29
     ebc:	e1 0f       	add	r30, r17
     ebe:	f1 1d       	adc	r31, r1
     ec0:	80 81       	ld	r24, Z
     ec2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
     ec6:	1f 5f       	subi	r17, 0xFF	; 255
     ec8:	e0 91 66 03 	lds	r30, 0x0366
     ecc:	f0 91 67 03 	lds	r31, 0x0367
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	81 17       	cp	r24, r17
     ed4:	68 f7       	brcc	.-38     	; 0xeb0 <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
     ed6:	0f 5f       	subi	r16, 0xFF	; 255
     ed8:	cc 5a       	subi	r28, 0xAC	; 172
     eda:	df 4f       	sbci	r29, 0xFF	; 255
     edc:	06 30       	cpi	r16, 0x06	; 6
     ede:	11 f0       	breq	.+4      	; 0xee4 <glcd_write+0x94>
     ee0:	97 01       	movw	r18, r14
     ee2:	c1 cf       	rjmp	.-126    	; 0xe66 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
     ee4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <glcd_reset_bbox>

}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     efc:	08 95       	ret

00000efe <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	10 f0       	brcs	.+4      	; 0xf06 <glcd_set_y_address+0x8>
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <glcd_set_y_address+0xa>
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     f0c:	08 95       	ret

00000f0e <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     f14:	08 95       	ret

00000f16 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
     f16:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
     f1a:	84 e2       	ldi	r24, 0x24	; 36
     f1c:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     f20:	08 95       	ret

00000f22 <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
     f22:	1f 93       	push	r17
     f24:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
     f26:	81 e2       	ldi	r24, 0x21	; 33
     f28:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
     f2c:	81 2f       	mov	r24, r17
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
     f34:	80 e2       	ldi	r24, 0x20	; 32
     f36:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
     f3a:	8c e0       	ldi	r24, 0x0C	; 12
     f3c:	0e 94 12 07 	call	0xe24	; 0xe24 <glcd_command>
}
     f40:	1f 91       	pop	r17
     f42:	08 95       	ret

00000f44 <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
     f44:	28 2f       	mov	r18, r24
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	68 1b       	sub	r22, r24
     f4c:	71 09       	sbc	r23, r1
     f4e:	46 9f       	mul	r20, r22
     f50:	c0 01       	movw	r24, r0
     f52:	47 9f       	mul	r20, r23
     f54:	90 0d       	add	r25, r0
     f56:	56 9f       	mul	r21, r22
     f58:	90 0d       	add	r25, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	6f ef       	ldi	r22, 0xFF	; 255
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
     f64:	82 2f       	mov	r24, r18
     f66:	86 0f       	add	r24, r22
     f68:	08 95       	ret

00000f6a <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
     f6a:	2f 92       	push	r2
     f6c:	3f 92       	push	r3
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	88 2e       	mov	r8, r24
     f94:	b6 2e       	mov	r11, r22
     f96:	94 2e       	mov	r9, r20
     f98:	c2 2e       	mov	r12, r18
     f9a:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
     f9c:	01 e0       	ldi	r16, 0x01	; 1
     f9e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <glcd_draw_rect>
     fa2:	dd 24       	eor	r13, r13
     fa4:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
     fa6:	0c 2d       	mov	r16, r12
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	38 01       	movw	r6, r16
     fac:	08 94       	sec
     fae:	61 08       	sbc	r6, r1
     fb0:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
     fb2:	29 2c       	mov	r2, r9
     fb4:	33 24       	eor	r3, r3
     fb6:	08 94       	sec
     fb8:	21 08       	sbc	r2, r1
     fba:	31 08       	sbc	r3, r1
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
     fbe:	8f 2d       	mov	r24, r15
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	6a 2d       	mov	r22, r10
     fc4:	0e 94 93 0b 	call	0x1726	; 0x1726 <glcd_get_pixel>
     fc8:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
     fca:	8f 2d       	mov	r24, r15
     fcc:	6a 2d       	mov	r22, r10
     fce:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
     fd2:	e3 94       	inc	r14
     fd4:	f3 94       	inc	r15
     fd6:	8e 2d       	mov	r24, r14
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	82 15       	cp	r24, r2
     fdc:	93 05       	cpc	r25, r3
     fde:	7c f3       	brlt	.-34     	; 0xfbe <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
     fe0:	d3 94       	inc	r13
     fe2:	8d 2d       	mov	r24, r13
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	86 15       	cp	r24, r6
     fe8:	97 05       	cpc	r25, r7
     fea:	34 f4       	brge	.+12     	; 0xff8 <glcd_scrolling_bar_graph+0x8e>
     fec:	f8 2c       	mov	r15, r8
     fee:	ee 24       	eor	r14, r14
     ff0:	e3 94       	inc	r14
     ff2:	ad 2c       	mov	r10, r13
     ff4:	ab 0c       	add	r10, r11
     ff6:	ee cf       	rjmp	.-36     	; 0xfd4 <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
     ff8:	03 50       	subi	r16, 0x03	; 3
     ffa:	10 40       	sbci	r17, 0x00	; 0
     ffc:	85 2d       	mov	r24, r5
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9c 01       	movw	r18, r24
    1002:	02 9f       	mul	r16, r18
    1004:	c0 01       	movw	r24, r0
    1006:	03 9f       	mul	r16, r19
    1008:	90 0d       	add	r25, r0
    100a:	12 9f       	mul	r17, r18
    100c:	90 0d       	add	r25, r0
    100e:	11 24       	eor	r1, r1
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    1018:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    101a:	0f 5f       	subi	r16, 0xFF	; 255
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	86 2f       	mov	r24, r22
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 17       	cp	r24, r16
    1024:	91 07       	cpc	r25, r17
    1026:	14 f0       	brlt	.+4      	; 0x102c <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    1028:	2c 2d       	mov	r18, r12
    102a:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    102c:	6c 2d       	mov	r22, r12
    102e:	6b 0d       	add	r22, r11
    1030:	98 2d       	mov	r25, r8
    1032:	92 50       	subi	r25, 0x02	; 2
    1034:	99 0d       	add	r25, r9
    1036:	16 2f       	mov	r17, r22
    1038:	12 1b       	sub	r17, r18
    103a:	62 50       	subi	r22, 0x02	; 2
    103c:	12 50       	subi	r17, 0x02	; 2
    103e:	89 2f       	mov	r24, r25
    1040:	49 2f       	mov	r20, r25
    1042:	21 2f       	mov	r18, r17
    1044:	01 e0       	ldi	r16, 0x01	; 1
    1046:	99 83       	std	Y+1, r25	; 0x01
    1048:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    104c:	11 50       	subi	r17, 0x01	; 1
    104e:	b3 94       	inc	r11
    1050:	99 81       	ldd	r25, Y+1	; 0x01
    1052:	89 2f       	mov	r24, r25
    1054:	61 2f       	mov	r22, r17
    1056:	49 2f       	mov	r20, r25
    1058:	2b 2d       	mov	r18, r11
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    1060:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
}
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	3f 90       	pop	r3
    1086:	2f 90       	pop	r2
    1088:	08 95       	ret

0000108a <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	78 2e       	mov	r7, r24
    10a2:	86 2e       	mov	r8, r22
    10a4:	94 2e       	mov	r9, r20
    10a6:	a2 2e       	mov	r10, r18
    10a8:	b0 2e       	mov	r11, r16
    10aa:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    10ac:	ee 20       	and	r14, r14
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <glcd_scrolling_bar_graph_timing+0x2a>
    10b0:	ff 24       	eor	r15, r15
    10b2:	f3 94       	inc	r15
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    10b8:	87 2d       	mov	r24, r7
    10ba:	68 2d       	mov	r22, r8
    10bc:	49 2d       	mov	r20, r9
    10be:	2a 2d       	mov	r18, r10
    10c0:	0b 2d       	mov	r16, r11
    10c2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    10c6:	1f 5f       	subi	r17, 0xFF	; 255
    10c8:	1f 15       	cp	r17, r15
    10ca:	b0 f3       	brcs	.-20     	; 0x10b8 <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    10cc:	c1 14       	cp	r12, r1
    10ce:	d1 04       	cpc	r13, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <glcd_scrolling_bar_graph_timing+0x4a>
    10d2:	41 c0       	rjmp	.+130    	; 0x1156 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    10d4:	b6 01       	movw	r22, r12
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__floatunsisf>
    10de:	5b 01       	movw	r10, r22
    10e0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a e7       	ldi	r20, 0x7A	; 122
    10e8:	55 e4       	ldi	r21, 0x45	; 69
    10ea:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__mulsf3>
    10ee:	7b 01       	movw	r14, r22
    10f0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	5f e3       	ldi	r21, 0x3F	; 63
    10fa:	0e 94 48 14 	call	0x2890	; 0x2890 <__cmpsf2>
    10fe:	88 23       	and	r24, r24
    1100:	1c f4       	brge	.+6      	; 0x1108 <glcd_scrolling_bar_graph_timing+0x7e>
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	24 c0       	rjmp	.+72     	; 0x1150 <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1108:	c8 01       	movw	r24, r16
    110a:	b7 01       	movw	r22, r14
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	3f ef       	ldi	r19, 0xFF	; 255
    1110:	4f e7       	ldi	r20, 0x7F	; 127
    1112:	57 e4       	ldi	r21, 0x47	; 71
    1114:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__gesf2>
    1118:	18 16       	cp	r1, r24
    111a:	b4 f4       	brge	.+44     	; 0x1148 <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111c:	c6 01       	movw	r24, r12
    111e:	b5 01       	movw	r22, r10
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__mulsf3>
    112c:	0e 94 4c 14 	call	0x2898	; 0x2898 <__fixunssfsi>
    1130:	80 e9       	ldi	r24, 0x90	; 144
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <glcd_scrolling_bar_graph_timing+0xb6>
    1136:	fc 01       	movw	r30, r24
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	61 50       	subi	r22, 0x01	; 1
    113e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	c1 f7       	brne	.-16     	; 0x1136 <glcd_scrolling_bar_graph_timing+0xac>
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	c8 01       	movw	r24, r16
    114a:	b7 01       	movw	r22, r14
    114c:	0e 94 4c 14 	call	0x2898	; 0x2898 <__fixunssfsi>
    1150:	cb 01       	movw	r24, r22
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	08 95       	ret

0000116e <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	e8 2e       	mov	r14, r24
    117a:	f6 2e       	mov	r15, r22
    117c:	d4 2e       	mov	r13, r20
    117e:	12 2f       	mov	r17, r18
    1180:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    1182:	62 2f       	mov	r22, r18
    1184:	62 50       	subi	r22, 0x02	; 2
    1186:	40 95       	com	r20
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 a2 07 	call	0xf44	; 0xf44 <glcd_map>
    118e:	f8 0e       	add	r15, r24
    1190:	18 1b       	sub	r17, r24
    1192:	12 50       	subi	r17, 0x02	; 2
    1194:	8e 2d       	mov	r24, r14
    1196:	6f 2d       	mov	r22, r15
    1198:	4d 2d       	mov	r20, r13
    119a:	21 2f       	mov	r18, r17
    119c:	01 e0       	ldi	r16, 0x01	; 1
    119e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <glcd_fill_rect>
}
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	08 95       	ret

000011ae <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	c8 2e       	mov	r12, r24
    11bc:	d6 2e       	mov	r13, r22
    11be:	e4 2e       	mov	r14, r20
    11c0:	12 2f       	mov	r17, r18
    11c2:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    11c4:	01 e0       	ldi	r16, 0x01	; 1
    11c6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    11ca:	61 2f       	mov	r22, r17
    11cc:	62 50       	subi	r22, 0x02	; 2
    11ce:	f0 94       	com	r15
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	4f 2d       	mov	r20, r15
    11d4:	0e 94 a2 07 	call	0xf44	; 0xf44 <glcd_map>
    11d8:	68 2f       	mov	r22, r24
    11da:	6f 5f       	subi	r22, 0xFF	; 255
    11dc:	6d 0d       	add	r22, r13
    11de:	9e ef       	ldi	r25, 0xFE	; 254
    11e0:	e9 0e       	add	r14, r25
    11e2:	18 1b       	sub	r17, r24
    11e4:	12 50       	subi	r17, 0x02	; 2
    11e6:	8c 2d       	mov	r24, r12
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	4e 2d       	mov	r20, r14
    11ec:	21 2f       	mov	r18, r17
    11ee:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <glcd_fill_rect>
}
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret

00001200 <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	f8 2e       	mov	r15, r24
    120a:	e6 2e       	mov	r14, r22
    120c:	12 2f       	mov	r17, r18
	if (height < 3) {
    120e:	23 30       	cpi	r18, 0x03	; 3
    1210:	60 f0       	brcs	.+24     	; 0x122a <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	64 2f       	mov	r22, r20
    1216:	40 2f       	mov	r20, r16
    1218:	0e 94 a2 07 	call	0xf44	; 0xf44 <glcd_map>
    121c:	48 2f       	mov	r20, r24
    121e:	8f 2d       	mov	r24, r15
    1220:	6e 2d       	mov	r22, r14
    1222:	21 2f       	mov	r18, r17
    1224:	01 e0       	ldi	r16, 0x01	; 1
    1226:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <glcd_fill_rect>
}
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	08 95       	ret

00001234 <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	c8 2e       	mov	r12, r24
    1242:	e6 2e       	mov	r14, r22
    1244:	14 2f       	mov	r17, r20
    1246:	f2 2e       	mov	r15, r18
    1248:	d0 2e       	mov	r13, r16
	if (height < 3) {
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	82 17       	cp	r24, r18
    124e:	a0 f4       	brcc	.+40     	; 0x1278 <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    1250:	8c 2d       	mov	r24, r12
    1252:	01 e0       	ldi	r16, 0x01	; 1
    1254:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    1258:	12 50       	subi	r17, 0x02	; 2
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	61 2f       	mov	r22, r17
    125e:	4d 2d       	mov	r20, r13
    1260:	0e 94 a2 07 	call	0xf44	; 0xf44 <glcd_map>
    1264:	48 2f       	mov	r20, r24
    1266:	e3 94       	inc	r14
    1268:	8e ef       	ldi	r24, 0xFE	; 254
    126a:	f8 0e       	add	r15, r24
    126c:	8c 2d       	mov	r24, r12
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	6e 2d       	mov	r22, r14
    1272:	2f 2d       	mov	r18, r15
    1274:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <glcd_fill_rect>
}
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	08 95       	ret

00001286 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1286:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1288:	90 93 69 03 	sts	0x0369, r25
    128c:	80 93 68 03 	sts	0x0368, r24
	font_current.width = width;
    1290:	60 93 6a 03 	sts	0x036A, r22
	font_current.height = height;
    1294:	40 93 6b 03 	sts	0x036B, r20
	font_current.start_char = start_char;
    1298:	20 93 6c 03 	sts	0x036C, r18
	font_current.end_char = end_char;
    129c:	00 93 6d 03 	sts	0x036D, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 6e 03 	sts	0x036E, r24
}
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    12aa:	ef 92       	push	r14
    12ac:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    12ae:	90 93 69 03 	sts	0x0369, r25
    12b2:	80 93 68 03 	sts	0x0368, r24
	font_current.width = width;
    12b6:	60 93 6a 03 	sts	0x036A, r22
	font_current.height = height;
    12ba:	40 93 6b 03 	sts	0x036B, r20
	font_current.start_char = start_char;
    12be:	20 93 6c 03 	sts	0x036C, r18
	font_current.end_char = end_char;
    12c2:	00 93 6d 03 	sts	0x036D, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    12c6:	e0 92 6e 03 	sts	0x036E, r14
}
    12ca:	0f 91       	pop	r16
    12cc:	ef 90       	pop	r14
    12ce:	08 95       	ret

000012d0 <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    12d0:	2f 92       	push	r2
    12d2:	3f 92       	push	r3
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	63 97       	sbiw	r28, 0x13	; 19
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	48 2e       	mov	r4, r24
    1306:	e6 2e       	mov	r14, r22
    1308:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    130a:	50 91 6c 03 	lds	r21, 0x036C
    130e:	45 17       	cp	r20, r21
    1310:	20 f0       	brcs	.+8      	; 0x131a <glcd_draw_char_xy+0x4a>
    1312:	80 91 6d 03 	lds	r24, 0x036D
    1316:	84 17       	cp	r24, r20
    1318:	08 f4       	brcc	.+2      	; 0x131c <glcd_draw_char_xy+0x4c>
    131a:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    131c:	80 91 6e 03 	lds	r24, 0x036E
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <glcd_draw_char_xy+0x56>
    1324:	58 c0       	rjmp	.+176    	; 0x13d6 <glcd_draw_char_xy+0x106>
    1326:	04 2d       	mov	r16, r4
    1328:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    132a:	43 2e       	mov	r4, r19
    132c:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    132e:	60 2e       	mov	r6, r16
    1330:	77 24       	eor	r7, r7
    1332:	8e 2c       	mov	r8, r14
    1334:	99 24       	eor	r9, r9
    1336:	49 c0       	rjmp	.+146    	; 0x13ca <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1338:	4f 2d       	mov	r20, r15
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	80 91 6c 03 	lds	r24, 0x036C
    1340:	92 01       	movw	r18, r4
    1342:	28 1b       	sub	r18, r24
    1344:	31 09       	sbc	r19, r1
    1346:	89 2f       	mov	r24, r25
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	bc 01       	movw	r22, r24
    134c:	26 9f       	mul	r18, r22
    134e:	c0 01       	movw	r24, r0
    1350:	27 9f       	mul	r18, r23
    1352:	90 0d       	add	r25, r0
    1354:	36 9f       	mul	r19, r22
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	84 0f       	add	r24, r20
    135c:	95 1f       	adc	r25, r21
    135e:	e0 91 68 03 	lds	r30, 0x0368
    1362:	f0 91 69 03 	lds	r31, 0x0369
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	e4 91       	lpm	r30, Z+
    136c:	1e 2d       	mov	r17, r14
    136e:	22 24       	eor	r2, r2
    1370:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1372:	5a 01       	movw	r10, r20
    1374:	a6 0c       	add	r10, r6
    1376:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1378:	ce 2e       	mov	r12, r30
    137a:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    137c:	74 e5       	ldi	r23, 0x54	; 84
    137e:	a7 16       	cp	r10, r23
    1380:	b1 04       	cpc	r11, r1
    1382:	0c f0       	brlt	.+2      	; 0x1386 <glcd_draw_char_xy+0xb6>
    1384:	70 c1       	rjmp	.+736    	; 0x1666 <glcd_draw_char_xy+0x396>
    1386:	c1 01       	movw	r24, r2
    1388:	88 0d       	add	r24, r8
    138a:	99 1d       	adc	r25, r9
    138c:	c0 97       	sbiw	r24, 0x30	; 48
    138e:	0c f0       	brlt	.+2      	; 0x1392 <glcd_draw_char_xy+0xc2>
    1390:	6a c1       	rjmp	.+724    	; 0x1666 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    1392:	c6 01       	movw	r24, r12
    1394:	02 2c       	mov	r0, r2
    1396:	02 c0       	rjmp	.+4      	; 0x139c <glcd_draw_char_xy+0xcc>
    1398:	95 95       	asr	r25
    139a:	87 95       	ror	r24
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <glcd_draw_char_xy+0xc8>
    13a0:	80 ff       	sbrs	r24, 0
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    13a4:	80 2f       	mov	r24, r16
    13a6:	61 2f       	mov	r22, r17
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    13ac:	80 2f       	mov	r24, r16
    13ae:	61 2f       	mov	r22, r17
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    13b6:	08 94       	sec
    13b8:	21 1c       	adc	r2, r1
    13ba:	31 1c       	adc	r3, r1
    13bc:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    13be:	88 e0       	ldi	r24, 0x08	; 8
    13c0:	28 16       	cp	r2, r24
    13c2:	31 04       	cpc	r3, r1
    13c4:	d9 f6       	brne	.-74     	; 0x137c <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    13c6:	f3 94       	inc	r15
    13c8:	0f 5f       	subi	r16, 0xFF	; 255
    13ca:	90 91 6a 03 	lds	r25, 0x036A
    13ce:	f9 16       	cp	r15, r25
    13d0:	08 f4       	brcc	.+2      	; 0x13d4 <glcd_draw_char_xy+0x104>
    13d2:	b2 cf       	rjmp	.-156    	; 0x1338 <glcd_draw_char_xy+0x68>
    13d4:	49 c1       	rjmp	.+658    	; 0x1668 <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	09 f0       	breq	.+2      	; 0x13dc <glcd_draw_char_xy+0x10c>
    13da:	9c c0       	rjmp	.+312    	; 0x1514 <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    13dc:	20 91 6b 03 	lds	r18, 0x036B
    13e0:	82 2f       	mov	r24, r18
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	90 70       	andi	r25, 0x00	; 0
    13e8:	26 95       	lsr	r18
    13ea:	26 95       	lsr	r18
    13ec:	26 95       	lsr	r18
    13ee:	89 2b       	or	r24, r25
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    13f2:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    13f4:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    13f6:	80 91 6a 03 	lds	r24, 0x036A
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	98 9f       	mul	r25, r24
    13fe:	80 2d       	mov	r24, r0
    1400:	11 24       	eor	r1, r1
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	23 2f       	mov	r18, r19
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	25 1b       	sub	r18, r21
    140c:	31 09       	sbc	r19, r1
    140e:	dc 01       	movw	r26, r24
    1410:	a2 9f       	mul	r26, r18
    1412:	c0 01       	movw	r24, r0
    1414:	a3 9f       	mul	r26, r19
    1416:	90 0d       	add	r25, r0
    1418:	b2 9f       	mul	r27, r18
    141a:	90 0d       	add	r25, r0
    141c:	11 24       	eor	r1, r1
    141e:	e0 91 68 03 	lds	r30, 0x0368
    1422:	f0 91 69 03 	lds	r31, 0x0369
    1426:	e8 0f       	add	r30, r24
    1428:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    142a:	b4 91       	lpm	r27, Z+
    142c:	bb 83       	std	Y+3, r27	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	23 2f       	mov	r18, r19
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3a 83       	std	Y+2, r19	; 0x02
    1436:	29 83       	std	Y+1, r18	; 0x01
    1438:	3f 01       	movw	r6, r30
    143a:	08 94       	sec
    143c:	61 1c       	adc	r6, r1
    143e:	71 1c       	adc	r7, r1
    1440:	54 2c       	mov	r5, r4
    1442:	88 24       	eor	r8, r8
    1444:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1446:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1448:	44 2d       	mov	r20, r4
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	5c 87       	std	Y+12, r21	; 0x0c
    144e:	4b 87       	std	Y+11, r20	; 0x0b
    1450:	4f c0       	rjmp	.+158    	; 0x14f0 <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    1452:	f5 01       	movw	r30, r10
    1454:	84 91       	lpm	r24, Z+
    1456:	e8 86       	std	Y+8, r14	; 0x08
    1458:	86 01       	movw	r16, r12
    145a:	1b 8a       	std	Y+19, r1	; 0x13
    145c:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    145e:	28 2e       	mov	r2, r24
    1460:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1462:	29 85       	ldd	r18, Y+9	; 0x09
    1464:	3a 85       	ldd	r19, Y+10	; 0x0a
    1466:	24 35       	cpi	r18, 0x54	; 84
    1468:	31 05       	cpc	r19, r1
    146a:	0c f0       	brlt	.+2      	; 0x146e <glcd_draw_char_xy+0x19e>
    146c:	fc c0       	rjmp	.+504    	; 0x1666 <glcd_draw_char_xy+0x396>
    146e:	2a 89       	ldd	r18, Y+18	; 0x12
    1470:	8a 89       	ldd	r24, Y+18	; 0x12
    1472:	9b 89       	ldd	r25, Y+19	; 0x13
    1474:	8e 0d       	add	r24, r14
    1476:	9f 1d       	adc	r25, r15
    1478:	c0 97       	sbiw	r24, 0x30	; 48
    147a:	0c f0       	brlt	.+2      	; 0x147e <glcd_draw_char_xy+0x1ae>
    147c:	f4 c0       	rjmp	.+488    	; 0x1666 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    147e:	80 91 6b 03 	lds	r24, 0x036B
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	08 17       	cp	r16, r24
    1486:	19 07       	cpc	r17, r25
    1488:	94 f4       	brge	.+36     	; 0x14ae <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    148a:	c1 01       	movw	r24, r2
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <glcd_draw_char_xy+0x1c4>
    1490:	95 95       	asr	r25
    1492:	87 95       	ror	r24
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <glcd_draw_char_xy+0x1c0>
    1498:	68 85       	ldd	r22, Y+8	; 0x08
    149a:	62 0f       	add	r22, r18
    149c:	80 ff       	sbrs	r24, 0
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    14a0:	85 2d       	mov	r24, r5
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    14a6:	85 2d       	mov	r24, r5
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    14ae:	4a 89       	ldd	r20, Y+18	; 0x12
    14b0:	5b 89       	ldd	r21, Y+19	; 0x13
    14b2:	4f 5f       	subi	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	5b 8b       	std	Y+19, r21	; 0x13
    14b8:	4a 8b       	std	Y+18, r20	; 0x12
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    14be:	48 30       	cpi	r20, 0x08	; 8
    14c0:	51 05       	cpc	r21, r1
    14c2:	79 f6       	brne	.-98     	; 0x1462 <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    14c4:	43 94       	inc	r4
    14c6:	68 e0       	ldi	r22, 0x08	; 8
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	e6 0e       	add	r14, r22
    14cc:	f7 1e       	adc	r15, r23
    14ce:	c6 0e       	add	r12, r22
    14d0:	d7 1e       	adc	r13, r23
    14d2:	08 94       	sec
    14d4:	a1 1c       	adc	r10, r1
    14d6:	b1 1c       	adc	r11, r1
    14d8:	7c 81       	ldd	r23, Y+4	; 0x04
    14da:	47 16       	cp	r4, r23
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <glcd_draw_char_xy+0x210>
    14de:	b9 cf       	rjmp	.-142    	; 0x1452 <glcd_draw_char_xy+0x182>
    14e0:	08 94       	sec
    14e2:	81 1c       	adc	r8, r1
    14e4:	91 1c       	adc	r9, r1
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	68 0e       	add	r6, r24
    14ec:	79 1e       	adc	r7, r25
    14ee:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	89 16       	cp	r8, r25
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <glcd_draw_char_xy+0x228>
    14f6:	b8 c0       	rjmp	.+368    	; 0x1668 <glcd_draw_char_xy+0x398>
    14f8:	89 89       	ldd	r24, Y+17	; 0x11
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	7c 01       	movw	r14, r24
    14fe:	53 01       	movw	r10, r6
    1500:	44 24       	eor	r4, r4
    1502:	cc 24       	eor	r12, r12
    1504:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1506:	ab 85       	ldd	r26, Y+11	; 0x0b
    1508:	bc 85       	ldd	r27, Y+12	; 0x0c
    150a:	a8 0d       	add	r26, r8
    150c:	b9 1d       	adc	r27, r9
    150e:	ba 87       	std	Y+10, r27	; 0x0a
    1510:	a9 87       	std	Y+9, r26	; 0x09
    1512:	e2 cf       	rjmp	.-60     	; 0x14d8 <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	09 f0       	breq	.+2      	; 0x151a <glcd_draw_char_xy+0x24a>
    1518:	a6 c0       	rjmp	.+332    	; 0x1666 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    151a:	b0 90 6b 03 	lds	r11, 0x036B
    151e:	b6 94       	lsr	r11
    1520:	b6 94       	lsr	r11
    1522:	b6 94       	lsr	r11
    1524:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    1526:	40 91 6a 03 	lds	r20, 0x036A
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    152a:	23 2f       	mov	r18, r19
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	25 1b       	sub	r18, r21
    1530:	31 09       	sbc	r19, r1
    1532:	b4 9e       	mul	r11, r20
    1534:	80 2d       	mov	r24, r0
    1536:	11 24       	eor	r1, r1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	fc 01       	movw	r30, r24
    153c:	2e 9f       	mul	r18, r30
    153e:	c0 01       	movw	r24, r0
    1540:	2f 9f       	mul	r18, r31
    1542:	90 0d       	add	r25, r0
    1544:	3e 9f       	mul	r19, r30
    1546:	90 0d       	add	r25, r0
    1548:	11 24       	eor	r1, r1
    154a:	80 90 68 03 	lds	r8, 0x0368
    154e:	90 90 69 03 	lds	r9, 0x0369
    1552:	88 0e       	add	r8, r24
    1554:	99 1e       	adc	r9, r25
    1556:	54 2e       	mov	r5, r20
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	41 50       	subi	r20, 0x01	; 1
    155e:	50 40       	sbci	r21, 0x00	; 0
    1560:	64 2f       	mov	r22, r20
    1562:	63 1b       	sub	r22, r19
    1564:	e0 e0       	ldi	r30, 0x00	; 0
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	07 c0       	rjmp	.+14     	; 0x157a <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    156c:	89 2f       	mov	r24, r25
    156e:	86 1b       	sub	r24, r22
    1570:	f4 01       	movw	r30, r8
    1572:	e8 0f       	add	r30, r24
    1574:	f1 1d       	adc	r31, r1
    1576:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	96 0f       	add	r25, r22
    157c:	2b 15       	cp	r18, r11
    157e:	b0 f3       	brcs	.-20     	; 0x156c <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    1580:	ee 23       	and	r30, r30
    1582:	21 f4       	brne	.+8      	; 0x158c <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    1584:	5a 94       	dec	r5
				if (var_width == 0) {
    1586:	11 f0       	breq	.+4      	; 0x158c <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    1588:	3f 5f       	subi	r19, 0xFF	; 255
    158a:	ea cf       	rjmp	.-44     	; 0x1560 <glcd_draw_char_xy+0x290>
		}
    158c:	ff 24       	eor	r15, r15
    158e:	66 24       	eor	r6, r6
    1590:	cc 24       	eor	r12, r12
    1592:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1594:	24 2d       	mov	r18, r4
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	38 8b       	std	Y+16, r19	; 0x10
    159a:	2f 87       	std	Y+15, r18	; 0x0f
    159c:	58 c0       	rjmp	.+176    	; 0x164e <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    159e:	8a 2d       	mov	r24, r10
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	20 91 6a 03 	lds	r18, 0x036A
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4e 81       	ldd	r20, Y+6	; 0x06
    15aa:	5f 81       	ldd	r21, Y+7	; 0x07
    15ac:	42 9f       	mul	r20, r18
    15ae:	f0 01       	movw	r30, r0
    15b0:	43 9f       	mul	r20, r19
    15b2:	f0 0d       	add	r31, r0
    15b4:	52 9f       	mul	r21, r18
    15b6:	f0 0d       	add	r31, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	e8 0f       	add	r30, r24
    15bc:	f9 1f       	adc	r31, r25
    15be:	e8 0d       	add	r30, r8
    15c0:	f9 1d       	adc	r31, r9
    15c2:	e4 91       	lpm	r30, Z+
    15c4:	86 01       	movw	r16, r12
    15c6:	1b 8a       	std	Y+19, r1	; 0x13
    15c8:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    15ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    15cc:	78 89       	ldd	r23, Y+16	; 0x10
    15ce:	68 0f       	add	r22, r24
    15d0:	79 1f       	adc	r23, r25
    15d2:	7e 87       	std	Y+14, r23	; 0x0e
    15d4:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    15d6:	2e 2e       	mov	r2, r30
    15d8:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	84 35       	cpi	r24, 0x54	; 84
    15e0:	91 05       	cpc	r25, r1
    15e2:	0c f0       	brlt	.+2      	; 0x15e6 <glcd_draw_char_xy+0x316>
    15e4:	40 c0       	rjmp	.+128    	; 0x1666 <glcd_draw_char_xy+0x396>
    15e6:	2a 89       	ldd	r18, Y+18	; 0x12
    15e8:	8a 89       	ldd	r24, Y+18	; 0x12
    15ea:	9b 89       	ldd	r25, Y+19	; 0x13
    15ec:	8e 0d       	add	r24, r14
    15ee:	9f 1d       	adc	r25, r15
    15f0:	c0 97       	sbiw	r24, 0x30	; 48
    15f2:	cc f5       	brge	.+114    	; 0x1666 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    15f4:	80 91 6b 03 	lds	r24, 0x036B
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	08 17       	cp	r16, r24
    15fc:	19 07       	cpc	r17, r25
    15fe:	94 f4       	brge	.+36     	; 0x1624 <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1600:	c1 01       	movw	r24, r2
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <glcd_draw_char_xy+0x33a>
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <glcd_draw_char_xy+0x336>
    160e:	6d 81       	ldd	r22, Y+5	; 0x05
    1610:	62 0f       	add	r22, r18
    1612:	80 ff       	sbrs	r24, 0
    1614:	03 c0       	rjmp	.+6      	; 0x161c <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1616:	87 2d       	mov	r24, r7
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    161c:	87 2d       	mov	r24, r7
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1624:	ea 89       	ldd	r30, Y+18	; 0x12
    1626:	fb 89       	ldd	r31, Y+19	; 0x13
    1628:	31 96       	adiw	r30, 0x01	; 1
    162a:	fb 8b       	std	Y+19, r31	; 0x13
    162c:	ea 8b       	std	Y+18, r30	; 0x12
    162e:	0f 5f       	subi	r16, 0xFF	; 255
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    1632:	38 97       	sbiw	r30, 0x08	; 8
    1634:	91 f6       	brne	.-92     	; 0x15da <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    1636:	a3 94       	inc	r10
    1638:	73 94       	inc	r7
    163a:	a5 14       	cp	r10, r5
    163c:	08 f4       	brcc	.+2      	; 0x1640 <glcd_draw_char_xy+0x370>
    163e:	af cf       	rjmp	.-162    	; 0x159e <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    1640:	63 94       	inc	r6
    1642:	28 e0       	ldi	r18, 0x08	; 8
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	e2 0e       	add	r14, r18
    1648:	f3 1e       	adc	r15, r19
    164a:	c2 0e       	add	r12, r18
    164c:	d3 1e       	adc	r13, r19
    164e:	6b 14       	cp	r6, r11
    1650:	10 f0       	brcs	.+4      	; 0x1656 <glcd_draw_char_xy+0x386>
    1652:	95 2d       	mov	r25, r5
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1656:	46 2d       	mov	r20, r6
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	5f 83       	std	Y+7, r21	; 0x07
    165c:	4e 83       	std	Y+6, r20	; 0x06
    165e:	ed 82       	std	Y+5, r14	; 0x05
    1660:	74 2c       	mov	r7, r4
    1662:	aa 24       	eor	r10, r10
    1664:	ea cf       	rjmp	.-44     	; 0x163a <glcd_draw_char_xy+0x36a>
    1666:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    1668:	89 2f       	mov	r24, r25
    166a:	63 96       	adiw	r28, 0x13	; 19
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	5f 90       	pop	r5
    1694:	4f 90       	pop	r4
    1696:	3f 90       	pop	r3
    1698:	2f 90       	pop	r2
    169a:	08 95       	ret

0000169c <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	18 2f       	mov	r17, r24
    16a6:	06 2f       	mov	r16, r22
    16a8:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    16aa:	86 2f       	mov	r24, r22
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	40 91 6b 03 	lds	r20, 0x036B
    16b2:	2f e2       	ldi	r18, 0x2F	; 47
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	24 1b       	sub	r18, r20
    16b8:	31 09       	sbc	r19, r1
    16ba:	28 17       	cp	r18, r24
    16bc:	39 07       	cpc	r19, r25
    16be:	64 f0       	brlt	.+24     	; 0x16d8 <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    16c0:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    16c2:	21 96       	adiw	r28, 0x01	; 1
    16c4:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    16c6:	44 23       	and	r20, r20
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    16ca:	81 2f       	mov	r24, r17
    16cc:	60 2f       	mov	r22, r16
    16ce:	0e 94 68 09 	call	0x12d0	; 0x12d0 <glcd_draw_char_xy>
		x += (width + 1);
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	18 0f       	add	r17, r24
    16d6:	f4 cf       	rjmp	.-24     	; 0x16c0 <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	18 2f       	mov	r17, r24
    16ec:	06 2f       	mov	r16, r22
    16ee:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    16f0:	86 2f       	mov	r24, r22
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	40 91 6b 03 	lds	r20, 0x036B
    16f8:	2f e2       	ldi	r18, 0x2F	; 47
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	24 1b       	sub	r18, r20
    16fe:	31 09       	sbc	r19, r1
    1700:	28 17       	cp	r18, r24
    1702:	39 07       	cpc	r19, r25
    1704:	44 f4       	brge	.+16     	; 0x1716 <glcd_draw_string_xy+0x34>
    1706:	0a c0       	rjmp	.+20     	; 0x171c <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    1708:	81 2f       	mov	r24, r17
    170a:	60 2f       	mov	r22, r16
    170c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <glcd_draw_char_xy>
		x += (width + 1);
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	18 0f       	add	r17, r24
		c++;
    1714:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1716:	48 81       	ld	r20, Y
    1718:	44 23       	and	r20, r20
    171a:	b1 f7       	brne	.-20     	; 0x1708 <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    1726:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1728:	84 35       	cpi	r24, 0x54	; 84
    172a:	f0 f4       	brcc	.+60     	; 0x1768 <glcd_get_pixel+0x42>
    172c:	60 33       	cpi	r22, 0x30	; 48
    172e:	e0 f4       	brcc	.+56     	; 0x1768 <glcd_get_pixel+0x42>
    1730:	86 2f       	mov	r24, r22
    1732:	86 95       	lsr	r24
    1734:	86 95       	lsr	r24
    1736:	86 95       	lsr	r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	24 e5       	ldi	r18, 0x54	; 84
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	82 9f       	mul	r24, r18
    1740:	f0 01       	movw	r30, r0
    1742:	83 9f       	mul	r24, r19
    1744:	f0 0d       	add	r31, r0
    1746:	92 9f       	mul	r25, r18
    1748:	f0 0d       	add	r31, r0
    174a:	11 24       	eor	r1, r1
    174c:	e4 0f       	add	r30, r20
    174e:	f1 1d       	adc	r31, r1
    1750:	e4 59       	subi	r30, 0x94	; 148
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	80 81       	ld	r24, Z
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	67 70       	andi	r22, 0x07	; 7
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <glcd_get_pixel+0x3a>
    175c:	95 95       	asr	r25
    175e:	87 95       	ror	r24
    1760:	6a 95       	dec	r22
    1762:	e2 f7       	brpl	.-8      	; 0x175c <glcd_get_pixel+0x36>
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	08 95       	ret
    1768:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    176a:	08 95       	ret

0000176c <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    176c:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    176e:	80 91 64 03 	lds	r24, 0x0364
    1772:	90 91 65 03 	lds	r25, 0x0365
    1776:	48 ef       	ldi	r20, 0xF8	; 248
    1778:	51 e0       	ldi	r21, 0x01	; 1
    177a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    177e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <glcd_bbox_refresh>
}
    1782:	08 95       	ret

00001784 <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	08 2f       	mov	r16, r24
    178a:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    178c:	84 35       	cpi	r24, 0x54	; 84
    178e:	e8 f4       	brcc	.+58     	; 0x17ca <glcd_invert_pixel+0x46>
    1790:	60 33       	cpi	r22, 0x30	; 48
    1792:	d8 f4       	brcc	.+54     	; 0x17ca <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    1794:	40 2f       	mov	r20, r16
    1796:	21 2f       	mov	r18, r17
    1798:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    179c:	e1 2f       	mov	r30, r17
    179e:	e6 95       	lsr	r30
    17a0:	e6 95       	lsr	r30
    17a2:	e6 95       	lsr	r30
    17a4:	84 e5       	ldi	r24, 0x54	; 84
    17a6:	e8 9f       	mul	r30, r24
    17a8:	f0 01       	movw	r30, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	e0 0f       	add	r30, r16
    17ae:	f1 1d       	adc	r31, r1
    17b0:	e4 59       	subi	r30, 0x94	; 148
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	17 70       	andi	r17, 0x07	; 7
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <glcd_invert_pixel+0x3c>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	1a 95       	dec	r17
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <glcd_invert_pixel+0x38>
    17c4:	20 81       	ld	r18, Z
    17c6:	28 27       	eor	r18, r24
    17c8:	20 83       	st	Z, r18
}
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	d6 2e       	mov	r13, r22
    17e0:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    17e2:	e8 2e       	mov	r14, r24
    17e4:	ff 24       	eor	r15, r15
    17e6:	e4 0e       	add	r14, r20
    17e8:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    17ea:	c6 2f       	mov	r28, r22
    17ec:	d0 e0       	ldi	r29, 0x00	; 0
    17ee:	c2 0f       	add	r28, r18
    17f0:	d1 1d       	adc	r29, r1
    17f2:	0b c0       	rjmp	.+22     	; 0x180a <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    17f4:	80 2f       	mov	r24, r16
    17f6:	61 2f       	mov	r22, r17
    17f8:	0e 94 c2 0b 	call	0x1784	; 0x1784 <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    17fc:	1f 5f       	subi	r17, 0xFF	; 255
    17fe:	81 2f       	mov	r24, r17
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	8c 17       	cp	r24, r28
    1804:	9d 07       	cpc	r25, r29
    1806:	b4 f3       	brlt	.-20     	; 0x17f4 <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	80 2f       	mov	r24, r16
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	8e 15       	cp	r24, r14
    1810:	9f 05       	cpc	r25, r15
    1812:	14 f4       	brge	.+4      	; 0x1818 <glcd_invert_area+0x48>
    1814:	1d 2d       	mov	r17, r13
    1816:	f3 cf       	rjmp	.-26     	; 0x17fe <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	08 95       	ret

00001828 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    1828:	a8 2f       	mov	r26, r24
    182a:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    182c:	84 35       	cpi	r24, 0x54	; 84
    182e:	d0 f5       	brcc	.+116    	; 0x18a4 <glcd_set_pixel+0x7c>
    1830:	60 33       	cpi	r22, 0x30	; 48
    1832:	c0 f5       	brcc	.+112    	; 0x18a4 <glcd_set_pixel+0x7c>
    1834:	56 2f       	mov	r21, r22
    1836:	56 95       	lsr	r21
    1838:	56 95       	lsr	r21
    183a:	56 95       	lsr	r21
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	26 2f       	mov	r18, r22
    1840:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    1842:	44 23       	and	r20, r20
    1844:	a1 f0       	breq	.+40     	; 0x186e <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    1846:	e4 e5       	ldi	r30, 0x54	; 84
    1848:	5e 9f       	mul	r21, r30
    184a:	f0 01       	movw	r30, r0
    184c:	11 24       	eor	r1, r1
    184e:	e8 0f       	add	r30, r24
    1850:	f9 1f       	adc	r31, r25
    1852:	e4 59       	subi	r30, 0x94	; 148
    1854:	fe 4f       	sbci	r31, 0xFE	; 254
    1856:	27 70       	andi	r18, 0x07	; 7
    1858:	30 70       	andi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <glcd_set_pixel+0x3c>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	2a 95       	dec	r18
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <glcd_set_pixel+0x38>
    1868:	20 81       	ld	r18, Z
    186a:	28 2b       	or	r18, r24
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    186e:	e4 e5       	ldi	r30, 0x54	; 84
    1870:	5e 9f       	mul	r21, r30
    1872:	f0 01       	movw	r30, r0
    1874:	11 24       	eor	r1, r1
    1876:	e8 0f       	add	r30, r24
    1878:	f9 1f       	adc	r31, r25
    187a:	e4 59       	subi	r30, 0x94	; 148
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	27 70       	andi	r18, 0x07	; 7
    1880:	30 70       	andi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <glcd_set_pixel+0x64>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	2a 95       	dec	r18
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <glcd_set_pixel+0x60>
    1890:	80 95       	com	r24
    1892:	20 81       	ld	r18, Z
    1894:	28 23       	and	r18, r24
    1896:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    1898:	8a 2f       	mov	r24, r26
    189a:	67 2f       	mov	r22, r23
    189c:	4a 2f       	mov	r20, r26
    189e:	27 2f       	mov	r18, r23
    18a0:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
    18a4:	08 95       	ret

000018a6 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    18a6:	3f 92       	push	r3
    18a8:	4f 92       	push	r4
    18aa:	5f 92       	push	r5
    18ac:	6f 92       	push	r6
    18ae:	7f 92       	push	r7
    18b0:	8f 92       	push	r8
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <glcd_fill_circle+0x24>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <glcd_fill_circle+0x26>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <glcd_fill_circle+0x28>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	b8 2e       	mov	r11, r24
    18d4:	e6 2e       	mov	r14, r22
    18d6:	f4 2e       	mov	r15, r20
    18d8:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    18da:	04 2f       	mov	r16, r20
    18dc:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    18de:	64 1b       	sub	r22, r20
    18e0:	48 0f       	add	r20, r24
    18e2:	2f 2d       	mov	r18, r15
    18e4:	2e 0d       	add	r18, r14
    18e6:	8f 19       	sub	r24, r15
    18e8:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    18ec:	8e 2c       	mov	r8, r14
    18ee:	99 24       	eor	r9, r9
    18f0:	24 01       	movw	r4, r8
    18f2:	40 1a       	sub	r4, r16
    18f4:	51 0a       	sbc	r5, r17
    18f6:	68 01       	movw	r12, r16
    18f8:	c8 0c       	add	r12, r8
    18fa:	d9 1c       	adc	r13, r9
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    18fe:	8b 2d       	mov	r24, r11
    1900:	64 2d       	mov	r22, r4
    1902:	46 2d       	mov	r20, r6
    1904:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    1908:	08 94       	sec
    190a:	41 1c       	adc	r4, r1
    190c:	51 1c       	adc	r5, r1
    190e:	c4 14       	cp	r12, r4
    1910:	d5 04       	cpc	r13, r5
    1912:	ac f7       	brge	.-22     	; 0x18fe <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1914:	dd 24       	eor	r13, r13
    1916:	d3 94       	inc	r13
    1918:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    191a:	00 0f       	add	r16, r16
    191c:	11 1f       	adc	r17, r17
    191e:	40 2e       	mov	r4, r16
    1920:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1922:	cf 2c       	mov	r12, r15
    1924:	aa 24       	eor	r10, r10
    1926:	00 e0       	ldi	r16, 0x00	; 0
    1928:	10 e0       	ldi	r17, 0x00	; 0
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    192e:	8e 2d       	mov	r24, r14
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9c 01       	movw	r18, r24
    1934:	21 50       	subi	r18, 0x01	; 1
    1936:	30 40       	sbci	r19, 0x00	; 0
    1938:	3a 83       	std	Y+2, r19	; 0x02
    193a:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    193c:	fc 01       	movw	r30, r24
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	fc 83       	std	Y+4, r31	; 0x04
    1942:	eb 83       	std	Y+3, r30	; 0x03
    1944:	54 c0       	rjmp	.+168    	; 0x19ee <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1946:	d7 fc       	sbrc	r13, 7
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <glcd_fill_circle+0xac>
			y--;
    194a:	ca 94       	dec	r12
			ddF_y += 2;
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	4f 0e       	add	r4, r31
			f += ddF_y;
    1950:	d4 0c       	add	r13, r4
		}
		x++;
    1952:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1954:	8c 2d       	mov	r24, r12
    1956:	99 27       	eor	r25, r25
    1958:	87 fd       	sbrc	r24, 7
    195a:	90 95       	com	r25
    195c:	94 01       	movw	r18, r8
    195e:	28 1b       	sub	r18, r24
    1960:	39 0b       	sbc	r19, r25
    1962:	3e 83       	std	Y+6, r19	; 0x06
    1964:	2d 83       	std	Y+5, r18	; 0x05
    1966:	7c 01       	movw	r14, r24
    1968:	e8 0c       	add	r14, r8
    196a:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    196c:	3a 2c       	mov	r3, r10
    196e:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1970:	5b 2c       	mov	r5, r11
    1972:	5a 18       	sub	r5, r10
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1976:	83 2d       	mov	r24, r3
    1978:	6d 81       	ldd	r22, Y+5	; 0x05
    197a:	46 2d       	mov	r20, r6
    197c:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1980:	85 2d       	mov	r24, r5
    1982:	6d 81       	ldd	r22, Y+5	; 0x05
    1984:	46 2d       	mov	r20, r6
    1986:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	ed 81       	ldd	r30, Y+5	; 0x05
    1996:	fe 81       	ldd	r31, Y+6	; 0x06
    1998:	ee 16       	cp	r14, r30
    199a:	ff 06       	cpc	r15, r31
    199c:	64 f7       	brge	.-40     	; 0x1976 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    199e:	29 81       	ldd	r18, Y+1	; 0x01
    19a0:	3a 81       	ldd	r19, Y+2	; 0x02
    19a2:	20 1b       	sub	r18, r16
    19a4:	31 0b       	sbc	r19, r17
    19a6:	3e 83       	std	Y+6, r19	; 0x06
    19a8:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    19aa:	eb 80       	ldd	r14, Y+3	; 0x03
    19ac:	fc 80       	ldd	r15, Y+4	; 0x04
    19ae:	e0 0e       	add	r14, r16
    19b0:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    19b2:	3c 2c       	mov	r3, r12
    19b4:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    19b6:	5b 2c       	mov	r5, r11
    19b8:	5c 18       	sub	r5, r12
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    19bc:	83 2d       	mov	r24, r3
    19be:	6d 81       	ldd	r22, Y+5	; 0x05
    19c0:	46 2d       	mov	r20, r6
    19c2:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    19c6:	85 2d       	mov	r24, r5
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	46 2d       	mov	r20, r6
    19cc:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	ed 81       	ldd	r30, Y+5	; 0x05
    19dc:	fe 81       	ldd	r31, Y+6	; 0x06
    19de:	ee 16       	cp	r14, r30
    19e0:	ff 06       	cpc	r15, r31
    19e2:	64 f7       	brge	.-40     	; 0x19bc <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    19e4:	d7 0c       	add	r13, r7
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    19ee:	ac 14       	cp	r10, r12
    19f0:	0c f4       	brge	.+2      	; 0x19f4 <glcd_fill_circle+0x14e>
    19f2:	a9 cf       	rjmp	.-174    	; 0x1946 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    19f4:	26 96       	adiw	r28, 0x06	; 6
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	7f 90       	pop	r7
    1a1a:	6f 90       	pop	r6
    1a1c:	5f 90       	pop	r5
    1a1e:	4f 90       	pop	r4
    1a20:	3f 90       	pop	r3
    1a22:	08 95       	ret

00001a24 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	a8 2e       	mov	r10, r24
    1a3c:	b6 2e       	mov	r11, r22
    1a3e:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    1a40:	99 24       	eor	r9, r9
    1a42:	93 94       	inc	r9
    1a44:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1a46:	84 2f       	mov	r24, r20
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	78 2e       	mov	r7, r24
    1a50:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1a52:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1a54:	ea 2c       	mov	r14, r10
    1a56:	e4 1a       	sub	r14, r20
    1a58:	06 2f       	mov	r16, r22
    1a5a:	04 1b       	sub	r16, r20
    1a5c:	f4 2e       	mov	r15, r20
    1a5e:	fa 0c       	add	r15, r10
    1a60:	14 2f       	mov	r17, r20
    1a62:	16 0f       	add	r17, r22
    1a64:	8e 2d       	mov	r24, r14
    1a66:	60 2f       	mov	r22, r16
    1a68:	4f 2d       	mov	r20, r15
    1a6a:	21 2f       	mov	r18, r17
    1a6c:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1a70:	8a 2d       	mov	r24, r10
    1a72:	61 2f       	mov	r22, r17
    1a74:	4c 2d       	mov	r20, r12
    1a76:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1a7a:	8a 2d       	mov	r24, r10
    1a7c:	60 2f       	mov	r22, r16
    1a7e:	4c 2d       	mov	r20, r12
    1a80:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1a84:	8f 2d       	mov	r24, r15
    1a86:	6b 2d       	mov	r22, r11
    1a88:	4c 2d       	mov	r20, r12
    1a8a:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1a8e:	8e 2d       	mov	r24, r14
    1a90:	6b 2d       	mov	r22, r11
    1a92:	4c 2d       	mov	r20, r12
    1a94:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1a98:	ee 24       	eor	r14, r14
    1a9a:	23 e0       	ldi	r18, 0x03	; 3
    1a9c:	82 2e       	mov	r8, r18
    1a9e:	42 c0       	rjmp	.+132    	; 0x1b24 <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1aa0:	97 fc       	sbrc	r9, 7
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <glcd_draw_circle+0x88>
			y--;
    1aa4:	da 94       	dec	r13
			ddF_y += 2;
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	78 0e       	add	r7, r24
			f += ddF_y;
    1aaa:	97 0c       	add	r9, r7
		}
		x++;
    1aac:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1aae:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1ab0:	fe 2c       	mov	r15, r14
    1ab2:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1ab4:	1d 2d       	mov	r17, r13
    1ab6:	1b 0d       	add	r17, r11
    1ab8:	8f 2d       	mov	r24, r15
    1aba:	61 2f       	mov	r22, r17
    1abc:	4c 2d       	mov	r20, r12
    1abe:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1ac2:	0a 2d       	mov	r16, r10
    1ac4:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1ac6:	80 2f       	mov	r24, r16
    1ac8:	61 2f       	mov	r22, r17
    1aca:	4c 2d       	mov	r20, r12
    1acc:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1ad0:	1b 2d       	mov	r17, r11
    1ad2:	1d 19       	sub	r17, r13
    1ad4:	8f 2d       	mov	r24, r15
    1ad6:	61 2f       	mov	r22, r17
    1ad8:	4c 2d       	mov	r20, r12
    1ada:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1ade:	80 2f       	mov	r24, r16
    1ae0:	61 2f       	mov	r22, r17
    1ae2:	4c 2d       	mov	r20, r12
    1ae4:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1ae8:	fd 2c       	mov	r15, r13
    1aea:	fa 0c       	add	r15, r10
    1aec:	1e 2d       	mov	r17, r14
    1aee:	1b 0d       	add	r17, r11
    1af0:	8f 2d       	mov	r24, r15
    1af2:	61 2f       	mov	r22, r17
    1af4:	4c 2d       	mov	r20, r12
    1af6:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1afa:	0a 2d       	mov	r16, r10
    1afc:	0d 19       	sub	r16, r13
    1afe:	80 2f       	mov	r24, r16
    1b00:	61 2f       	mov	r22, r17
    1b02:	4c 2d       	mov	r20, r12
    1b04:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1b08:	1b 2d       	mov	r17, r11
    1b0a:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1b0c:	8f 2d       	mov	r24, r15
    1b0e:	61 2f       	mov	r22, r17
    1b10:	4c 2d       	mov	r20, r12
    1b12:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1b16:	80 2f       	mov	r24, r16
    1b18:	61 2f       	mov	r22, r17
    1b1a:	4c 2d       	mov	r20, r12
    1b1c:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1b24:	ed 14       	cp	r14, r13
    1b26:	0c f4       	brge	.+2      	; 0x1b2a <glcd_draw_circle+0x106>
    1b28:	bb cf       	rjmp	.-138    	; 0x1aa0 <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	9f 90       	pop	r9
    1b3c:	8f 90       	pop	r8
    1b3e:	7f 90       	pop	r7
    1b40:	08 95       	ret

00001b42 <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1b42:	2f 92       	push	r2
    1b44:	3f 92       	push	r3
    1b46:	4f 92       	push	r4
    1b48:	5f 92       	push	r5
    1b4a:	6f 92       	push	r6
    1b4c:	7f 92       	push	r7
    1b4e:	8f 92       	push	r8
    1b50:	9f 92       	push	r9
    1b52:	af 92       	push	r10
    1b54:	bf 92       	push	r11
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <glcd_draw_rect_thick+0x26>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	b8 2e       	mov	r11, r24
    1b70:	a6 2e       	mov	r10, r22
    1b72:	44 2e       	mov	r4, r20
    1b74:	29 83       	std	Y+1, r18	; 0x01
    1b76:	90 2e       	mov	r9, r16
    1b78:	8e 2d       	mov	r24, r14
    1b7a:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    1b7c:	00 23       	and	r16, r16
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <glcd_draw_rect_thick+0x42>
    1b80:	99 24       	eor	r9, r9
    1b82:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    1b84:	88 23       	and	r24, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <glcd_draw_rect_thick+0x48>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	cb 2c       	mov	r12, r11
    1b90:	dd 24       	eor	r13, r13
    1b92:	16 01       	movw	r2, r12
    1b94:	24 0c       	add	r2, r4
    1b96:	31 1c       	adc	r3, r1
    1b98:	89 80       	ldd	r8, Y+1	; 0x01
    1b9a:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1b9c:	68 2e       	mov	r6, r24
    1b9e:	77 24       	eor	r7, r7
    1ba0:	18 c0       	rjmp	.+48     	; 0x1bd2 <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    1ba2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba4:	6a 0d       	add	r22, r10
    1ba6:	8e 2d       	mov	r24, r14
    1ba8:	45 2d       	mov	r20, r5
    1baa:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1bae:	8e 2d       	mov	r24, r14
    1bb0:	6f 2d       	mov	r22, r15
    1bb2:	45 2d       	mov	r20, r5
    1bb4:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	9b 83       	std	Y+3, r25	; 0x03
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
    1bc2:	fa 94       	dec	r15
    1bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc8:	e6 15       	cp	r30, r6
    1bca:	f7 05       	cpc	r31, r7
    1bcc:	54 f3       	brlt	.-44     	; 0x1ba2 <glcd_draw_rect_thick+0x60>
    1bce:	0f 5f       	subi	r16, 0xFF	; 255
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	8c 0d       	add	r24, r12
    1bd6:	9d 1d       	adc	r25, r13
    1bd8:	82 15       	cp	r24, r2
    1bda:	93 05       	cpc	r25, r3
    1bdc:	34 f4       	brge	.+12     	; 0x1bea <glcd_draw_rect_thick+0xa8>
    1bde:	f8 2c       	mov	r15, r8
    1be0:	1b 82       	std	Y+3, r1	; 0x03
    1be2:	1a 82       	std	Y+2, r1	; 0x02
    1be4:	eb 2c       	mov	r14, r11
    1be6:	e0 0e       	add	r14, r16
    1be8:	ec cf       	rjmp	.-40     	; 0x1bc2 <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1bea:	00 e0       	ldi	r16, 0x00	; 0
    1bec:	10 e0       	ldi	r17, 0x00	; 0
    1bee:	ca 2c       	mov	r12, r10
    1bf0:	dd 24       	eor	r13, r13
    1bf2:	36 01       	movw	r6, r12
    1bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf6:	6f 0e       	add	r6, r31
    1bf8:	71 1c       	adc	r7, r1
    1bfa:	34 2c       	mov	r3, r4
    1bfc:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1bfe:	89 2c       	mov	r8, r9
    1c00:	99 24       	eor	r9, r9
    1c02:	18 c0       	rjmp	.+48     	; 0x1c34 <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	8b 0d       	add	r24, r11
    1c08:	6f 2d       	mov	r22, r15
    1c0a:	45 2d       	mov	r20, r5
    1c0c:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1c10:	8e 2d       	mov	r24, r14
    1c12:	6f 2d       	mov	r22, r15
    1c14:	45 2d       	mov	r20, r5
    1c16:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	9b 83       	std	Y+3, r25	; 0x03
    1c22:	8a 83       	std	Y+2, r24	; 0x02
    1c24:	ea 94       	dec	r14
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	e8 15       	cp	r30, r8
    1c2c:	f9 05       	cpc	r31, r9
    1c2e:	54 f3       	brlt	.-44     	; 0x1c04 <glcd_draw_rect_thick+0xc2>
    1c30:	0f 5f       	subi	r16, 0xFF	; 255
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1c34:	c8 01       	movw	r24, r16
    1c36:	8c 0d       	add	r24, r12
    1c38:	9d 1d       	adc	r25, r13
    1c3a:	86 15       	cp	r24, r6
    1c3c:	97 05       	cpc	r25, r7
    1c3e:	34 f4       	brge	.+12     	; 0x1c4c <glcd_draw_rect_thick+0x10a>
    1c40:	e3 2c       	mov	r14, r3
    1c42:	1b 82       	std	Y+3, r1	; 0x03
    1c44:	1a 82       	std	Y+2, r1	; 0x02
    1c46:	fa 2c       	mov	r15, r10
    1c48:	f0 0e       	add	r15, r16
    1c4a:	ec cf       	rjmp	.-40     	; 0x1c24 <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1c4c:	4b 2d       	mov	r20, r11
    1c4e:	41 50       	subi	r20, 0x01	; 1
    1c50:	44 0d       	add	r20, r4
    1c52:	2a 2d       	mov	r18, r10
    1c54:	21 50       	subi	r18, 0x01	; 1
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	2f 0f       	add	r18, r31
    1c5a:	8b 2d       	mov	r24, r11
    1c5c:	6a 2d       	mov	r22, r10
    1c5e:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	af 90       	pop	r10
    1c7c:	9f 90       	pop	r9
    1c7e:	8f 90       	pop	r8
    1c80:	7f 90       	pop	r7
    1c82:	6f 90       	pop	r6
    1c84:	5f 90       	pop	r5
    1c86:	4f 90       	pop	r4
    1c88:	3f 90       	pop	r3
    1c8a:	2f 90       	pop	r2
    1c8c:	08 95       	ret

00001c8e <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	e8 2e       	mov	r14, r24
    1cac:	f6 2e       	mov	r15, r22
    1cae:	a4 2e       	mov	r10, r20
    1cb0:	72 2e       	mov	r7, r18
    1cb2:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1cb4:	c0 e0       	ldi	r28, 0x00	; 0
    1cb6:	d0 e0       	ldi	r29, 0x00	; 0
    1cb8:	c8 2e       	mov	r12, r24
    1cba:	dd 24       	eor	r13, r13
    1cbc:	46 01       	movw	r8, r12
    1cbe:	84 0e       	add	r8, r20
    1cc0:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    1cc2:	fa 94       	dec	r15
    1cc4:	0f 2d       	mov	r16, r15
    1cc6:	02 0f       	add	r16, r18
    1cc8:	f3 94       	inc	r15
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1ccc:	1e 2d       	mov	r17, r14
    1cce:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    1cd0:	81 2f       	mov	r24, r17
    1cd2:	6f 2d       	mov	r22, r15
    1cd4:	4b 2d       	mov	r20, r11
    1cd6:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1cda:	81 2f       	mov	r24, r17
    1cdc:	60 2f       	mov	r22, r16
    1cde:	4b 2d       	mov	r20, r11
    1ce0:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1ce4:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	8c 0d       	add	r24, r12
    1cea:	9d 1d       	adc	r25, r13
    1cec:	88 15       	cp	r24, r8
    1cee:	99 05       	cpc	r25, r9
    1cf0:	6c f3       	brlt	.-38     	; 0x1ccc <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1cf2:	c0 e0       	ldi	r28, 0x00	; 0
    1cf4:	d0 e0       	ldi	r29, 0x00	; 0
    1cf6:	cf 2c       	mov	r12, r15
    1cf8:	dd 24       	eor	r13, r13
    1cfa:	46 01       	movw	r8, r12
    1cfc:	87 0c       	add	r8, r7
    1cfe:	91 1c       	adc	r9, r1
    1d00:	0e 2d       	mov	r16, r14
    1d02:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    1d04:	60 2e       	mov	r6, r16
    1d06:	6a 0c       	add	r6, r10
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1d0a:	1f 2d       	mov	r17, r15
    1d0c:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    1d0e:	8e 2d       	mov	r24, r14
    1d10:	61 2f       	mov	r22, r17
    1d12:	4b 2d       	mov	r20, r11
    1d14:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    1d18:	86 2d       	mov	r24, r6
    1d1a:	61 2f       	mov	r22, r17
    1d1c:	4b 2d       	mov	r20, r11
    1d1e:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1d22:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1d24:	ce 01       	movw	r24, r28
    1d26:	8c 0d       	add	r24, r12
    1d28:	9d 1d       	adc	r25, r13
    1d2a:	88 15       	cp	r24, r8
    1d2c:	99 05       	cpc	r25, r9
    1d2e:	6c f3       	brlt	.-38     	; 0x1d0a <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1d30:	0a 0d       	add	r16, r10
    1d32:	2f 2d       	mov	r18, r15
    1d34:	21 50       	subi	r18, 0x01	; 1
    1d36:	27 0d       	add	r18, r7
    1d38:	8e 2d       	mov	r24, r14
    1d3a:	6f 2d       	mov	r22, r15
    1d3c:	40 2f       	mov	r20, r16
    1d3e:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	9f 90       	pop	r9
    1d58:	8f 90       	pop	r8
    1d5a:	7f 90       	pop	r7
    1d5c:	6f 90       	pop	r6
    1d5e:	08 95       	ret

00001d60 <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1d60:	2f 92       	push	r2
    1d62:	3f 92       	push	r3
    1d64:	4f 92       	push	r4
    1d66:	5f 92       	push	r5
    1d68:	6f 92       	push	r6
    1d6a:	7f 92       	push	r7
    1d6c:	8f 92       	push	r8
    1d6e:	9f 92       	push	r9
    1d70:	af 92       	push	r10
    1d72:	bf 92       	push	r11
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	d8 2e       	mov	r13, r24
    1d86:	c6 2e       	mov	r12, r22
    1d88:	44 2e       	mov	r4, r20
    1d8a:	32 2e       	mov	r3, r18
    1d8c:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1d8e:	00 e0       	ldi	r16, 0x00	; 0
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	a8 2e       	mov	r10, r24
    1d94:	bb 24       	eor	r11, r11
    1d96:	35 01       	movw	r6, r10
    1d98:	64 0e       	add	r6, r20
    1d9a:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    1d9c:	e6 2e       	mov	r14, r22
    1d9e:	ff 24       	eor	r15, r15
    1da0:	47 01       	movw	r8, r14
    1da2:	82 0e       	add	r8, r18
    1da4:	91 1c       	adc	r9, r1
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <glcd_fill_rect+0x70>
    1da8:	c0 e0       	ldi	r28, 0x00	; 0
    1daa:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    1dac:	5d 2c       	mov	r5, r13
    1dae:	50 0e       	add	r5, r16
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <glcd_fill_rect+0x60>
    1db2:	6c 2d       	mov	r22, r12
    1db4:	6c 0f       	add	r22, r28
    1db6:	85 2d       	mov	r24, r5
    1db8:	42 2d       	mov	r20, r2
    1dba:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
    1dbe:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	8e 0d       	add	r24, r14
    1dc4:	9f 1d       	adc	r25, r15
    1dc6:	88 15       	cp	r24, r8
    1dc8:	99 05       	cpc	r25, r9
    1dca:	9c f3       	brlt	.-26     	; 0x1db2 <glcd_fill_rect+0x52>
    1dcc:	0f 5f       	subi	r16, 0xFF	; 255
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	8a 0d       	add	r24, r10
    1dd4:	9b 1d       	adc	r25, r11
    1dd6:	86 15       	cp	r24, r6
    1dd8:	97 05       	cpc	r25, r7
    1dda:	34 f3       	brlt	.-52     	; 0x1da8 <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1ddc:	4d 2d       	mov	r20, r13
    1dde:	41 50       	subi	r20, 0x01	; 1
    1de0:	44 0d       	add	r20, r4
    1de2:	2c 2d       	mov	r18, r12
    1de4:	21 50       	subi	r18, 0x01	; 1
    1de6:	23 0d       	add	r18, r3
    1de8:	8d 2d       	mov	r24, r13
    1dea:	6c 2d       	mov	r22, r12
    1dec:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
}
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
    1e10:	3f 90       	pop	r3
    1e12:	2f 90       	pop	r2
    1e14:	08 95       	ret

00001e16 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    1e16:	9f 92       	push	r9
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	f8 2e       	mov	r15, r24
    1e2a:	e6 2e       	mov	r14, r22
    1e2c:	d4 2e       	mov	r13, r20
    1e2e:	12 2f       	mov	r17, r18
    1e30:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    1e32:	aa 24       	eor	r10, r10
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	26 1b       	sub	r18, r22
    1e38:	31 09       	sbc	r19, r1
    1e3a:	37 ff       	sbrs	r19, 7
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <glcd_draw_line+0x2e>
    1e3e:	30 95       	com	r19
    1e40:	21 95       	neg	r18
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	8d 2d       	mov	r24, r13
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	8f 19       	sub	r24, r15
    1e4a:	91 09       	sbc	r25, r1
    1e4c:	97 ff       	sbrs	r25, 7
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <glcd_draw_line+0x40>
    1e50:	90 95       	com	r25
    1e52:	81 95       	neg	r24
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	82 17       	cp	r24, r18
    1e58:	93 07       	cpc	r25, r19
    1e5a:	44 f4       	brge	.+16     	; 0x1e6c <glcd_draw_line+0x56>
    1e5c:	aa 24       	eor	r10, r10
    1e5e:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    1e60:	8e 2d       	mov	r24, r14
    1e62:	ef 2c       	mov	r14, r15
    1e64:	f8 2e       	mov	r15, r24
    1e66:	81 2f       	mov	r24, r17
    1e68:	1d 2d       	mov	r17, r13
    1e6a:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    1e6c:	df 14       	cp	r13, r15
    1e6e:	30 f4       	brcc	.+12     	; 0x1e7c <glcd_draw_line+0x66>
    1e70:	8d 2d       	mov	r24, r13
    1e72:	df 2c       	mov	r13, r15
    1e74:	f8 2e       	mov	r15, r24
    1e76:	81 2f       	mov	r24, r17
    1e78:	1e 2d       	mov	r17, r14
    1e7a:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    1e7c:	8f 2d       	mov	r24, r15
    1e7e:	6e 2d       	mov	r22, r14
    1e80:	4d 2d       	mov	r20, r13
    1e82:	21 2f       	mov	r18, r17
    1e84:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>

	dx = x1 - x0;
    1e88:	cd 2c       	mov	r12, r13
    1e8a:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    1e8c:	81 2f       	mov	r24, r17
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	8e 19       	sub	r24, r14
    1e92:	91 09       	sbc	r25, r1
    1e94:	97 ff       	sbrs	r25, 7
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <glcd_draw_line+0x88>
    1e98:	90 95       	com	r25
    1e9a:	81 95       	neg	r24
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    1ea0:	e1 16       	cp	r14, r17
    1ea2:	10 f0       	brcs	.+4      	; 0x1ea8 <glcd_draw_line+0x92>
    1ea4:	0f ef       	ldi	r16, 0xFF	; 255
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <glcd_draw_line+0x94>
    1ea8:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    1eaa:	1c 2d       	mov	r17, r12
    1eac:	16 95       	lsr	r17
    1eae:	10 c0       	rjmp	.+32     	; 0x1ed0 <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    1eb0:	aa 20       	and	r10, r10
    1eb2:	19 f0       	breq	.+6      	; 0x1eba <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    1eb4:	8e 2d       	mov	r24, r14
    1eb6:	6f 2d       	mov	r22, r15
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    1eba:	8f 2d       	mov	r24, r15
    1ebc:	6e 2d       	mov	r22, r14
    1ebe:	49 2d       	mov	r20, r9
    1ec0:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
		}
		err -= dy;
    1ec4:	1b 19       	sub	r17, r11
		if (err < 0) {
    1ec6:	17 ff       	sbrs	r17, 7
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <glcd_draw_line+0xb8>
			y0 += ystep;
    1eca:	e0 0e       	add	r14, r16
			err += dx;
    1ecc:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    1ece:	f3 94       	inc	r15
    1ed0:	df 14       	cp	r13, r15
    1ed2:	70 f7       	brcc	.-36     	; 0x1eb0 <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	08 95       	ret

00001ee8 <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	e8 2e       	mov	r14, r24
    1ef6:	d6 2e       	mov	r13, r22
    1ef8:	14 2f       	mov	r17, r20
    1efa:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    1efc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    1f00:	1e 0d       	add	r17, r14
    1f02:	fd 0c       	add	r15, r13
    1f04:	8e 2d       	mov	r24, r14
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	6f 2d       	mov	r22, r15
    1f0a:	41 2f       	mov	r20, r17
    1f0c:	2f 2d       	mov	r18, r15
    1f0e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    1f12:	d3 94       	inc	r13
    1f14:	81 2f       	mov	r24, r17
    1f16:	6d 2d       	mov	r22, r13
    1f18:	41 2f       	mov	r20, r17
    1f1a:	2f 2d       	mov	r18, r15
    1f1c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <glcd_draw_line>
}
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	df 90       	pop	r13
    1f2a:	cf 90       	pop	r12
    1f2c:	08 95       	ret

00001f2e <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    1f2e:	80 e6       	ldi	r24, 0x60	; 96
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0e 94 b6 0b 	call	0x176c	; 0x176c <glcd_draw_bitmap>
	glcd_write();	
    1f36:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
	while (1) {
		DEMO_RETURN();
    1f3a:	80 91 66 01 	lds	r24, 0x0166
    1f3e:	88 23       	and	r24, r24
    1f40:	e1 f3       	breq	.-8      	; 0x1f3a <glcd_test_bitmap_128x64+0xc>
    1f42:	10 92 66 01 	sts	0x0166, r1
	}
}
    1f46:	08 95       	ret

00001f48 <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
	glcd_clear();
    1f50:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
	glcd_write();
    1f54:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    1f58:	40 c0       	rjmp	.+128    	; 0x1fda <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	42 e3       	ldi	r20, 0x32	; 50
    1f60:	22 e3       	ldi	r18, 0x32	; 50
    1f62:	0c 2f       	mov	r16, r28
    1f64:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    1f68:	8c e3       	ldi	r24, 0x3C	; 60
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	42 e3       	ldi	r20, 0x32	; 50
    1f6e:	2e e1       	ldi	r18, 0x1E	; 30
    1f70:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    1f74:	8c e3       	ldi	r24, 0x3C	; 60
    1f76:	63 e2       	ldi	r22, 0x23	; 35
    1f78:	4c e3       	ldi	r20, 0x3C	; 60
    1f7a:	24 e1       	ldi	r18, 0x14	; 20
    1f7c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    1f80:	80 91 66 01 	lds	r24, 0x0166
    1f84:	88 23       	and	r24, r24
    1f86:	f9 f4       	brne	.+62     	; 0x1fc6 <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    1f88:	64 96       	adiw	r28, 0x14	; 20
    1f8a:	cf 3f       	cpi	r28, 0xFF	; 255
    1f8c:	d1 05       	cpc	r29, r1
    1f8e:	29 f3       	breq	.-54     	; 0x1f5a <glcd_test_scrolling_graph+0x12>
    1f90:	20 f3       	brcs	.-56     	; 0x1f5a <glcd_test_scrolling_graph+0x12>
    1f92:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    1f94:	01 2f       	mov	r16, r17
    1f96:	00 95       	com	r16
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	42 e3       	ldi	r20, 0x32	; 50
    1f9e:	22 e3       	ldi	r18, 0x32	; 50
    1fa0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    1fa4:	8c e3       	ldi	r24, 0x3C	; 60
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	42 e3       	ldi	r20, 0x32	; 50
    1faa:	2e e1       	ldi	r18, 0x1E	; 30
    1fac:	01 2f       	mov	r16, r17
    1fae:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    1fb2:	8c e3       	ldi	r24, 0x3C	; 60
    1fb4:	63 e2       	ldi	r22, 0x23	; 35
    1fb6:	4c e3       	ldi	r20, 0x3C	; 60
    1fb8:	24 e1       	ldi	r18, 0x14	; 20
    1fba:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    1fbe:	80 91 66 01 	lds	r24, 0x0166
    1fc2:	88 23       	and	r24, r24
    1fc4:	39 f0       	breq	.+14     	; 0x1fd4 <glcd_test_scrolling_graph+0x8c>
    1fc6:	10 92 66 01 	sts	0x0166, r1
		}
	}	
}
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    1fd4:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    1fd6:	14 30       	cpi	r17, 0x04	; 4
    1fd8:	e9 f6       	brne	.-70     	; 0x1f94 <glcd_test_scrolling_graph+0x4c>
    1fda:	c0 e0       	ldi	r28, 0x00	; 0
    1fdc:	d0 e0       	ldi	r29, 0x00	; 0
    1fde:	d5 cf       	rjmp	.-86     	; 0x1f8a <glcd_test_scrolling_graph+0x42>

00001fe0 <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    1fe0:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	97 e0       	ldi	r25, 0x07	; 7
    1fe6:	65 e0       	ldi	r22, 0x05	; 5
    1fe8:	47 e0       	ldi	r20, 0x07	; 7
    1fea:	20 e2       	ldi	r18, 0x20	; 32
    1fec:	0f e7       	ldi	r16, 0x7F	; 127
    1fee:	0e 94 b3 12 	call	0x2566	; 0x2566 <glcd_tiny_set_font>
	glcd_clear_buffer();
    1ff2:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	51 e0       	ldi	r21, 0x01	; 1
    1ffe:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
	glcd_write();
    2002:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
	while(1) {
		DEMO_RETURN();
    2006:	80 91 66 01 	lds	r24, 0x0166
    200a:	88 23       	and	r24, r24
    200c:	e1 f3       	breq	.-8      	; 0x2006 <glcd_test_hello_world+0x26>
    200e:	10 92 66 01 	sts	0x0166, r1
	}
}
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2016:	cf 92       	push	r12
    2018:	ef 92       	push	r14
    201a:	0f 93       	push	r16
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	97 e0       	ldi	r25, 0x07	; 7
    2024:	65 e0       	ldi	r22, 0x05	; 5
    2026:	47 e0       	ldi	r20, 0x07	; 7
    2028:	20 e2       	ldi	r18, 0x20	; 32
    202a:	0f e7       	ldi	r16, 0x7F	; 127
    202c:	0e 94 b3 12 	call	0x2566	; 0x2566 <glcd_tiny_set_font>
	glcd_clear_buffer();
    2030:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	4d e0       	ldi	r20, 0x0D	; 13
    203a:	51 e0       	ldi	r21, 0x01	; 1
    203c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
	glcd_write();
    2040:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    2044:	80 ed       	ldi	r24, 0xD0	; 208
    2046:	97 e0       	ldi	r25, 0x07	; 7
    2048:	20 e9       	ldi	r18, 0x90	; 144
    204a:	31 e0       	ldi	r19, 0x01	; 1
    204c:	f9 01       	movw	r30, r18
    204e:	31 97       	sbiw	r30, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	d9 f7       	brne	.-10     	; 0x204c <glcd_test_rectangles+0x36>
    2056:	c0 e9       	ldi	r28, 0x90	; 144
    2058:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    205a:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	44 e6       	ldi	r20, 0x64	; 100
    2064:	22 e3       	ldi	r18, 0x32	; 50
    2066:	01 e0       	ldi	r16, 0x01	; 1
    2068:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	69 e0       	ldi	r22, 0x09	; 9
    2070:	4c e1       	ldi	r20, 0x1C	; 28
    2072:	51 e0       	ldi	r21, 0x01	; 1
    2074:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
		glcd_write();
    2078:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    207c:	88 e8       	ldi	r24, 0x88	; 136
    207e:	93 e1       	ldi	r25, 0x13	; 19
    2080:	fe 01       	movw	r30, r28
    2082:	31 97       	sbiw	r30, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	d9 f7       	brne	.-10     	; 0x2080 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    208a:	80 91 66 01 	lds	r24, 0x0166
    208e:	88 23       	and	r24, r24
    2090:	09 f0       	breq	.+2      	; 0x2094 <glcd_test_rectangles+0x7e>
    2092:	85 c0       	rjmp	.+266    	; 0x219e <glcd_test_rectangles+0x188>
		
		glcd_clear();
    2094:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	69 e0       	ldi	r22, 0x09	; 9
    209c:	4b e2       	ldi	r20, 0x2B	; 43
    209e:	51 e0       	ldi	r21, 0x01	; 1
    20a0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
		glcd_write();
    20a4:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    20a8:	85 e0       	ldi	r24, 0x05	; 5
    20aa:	65 e0       	ldi	r22, 0x05	; 5
    20ac:	40 e5       	ldi	r20, 0x50	; 80
    20ae:	2e e1       	ldi	r18, 0x1E	; 30
    20b0:	03 e0       	ldi	r16, 0x03	; 3
    20b2:	56 e0       	ldi	r21, 0x06	; 6
    20b4:	e5 2e       	mov	r14, r21
    20b6:	cc 24       	eor	r12, r12
    20b8:	c3 94       	inc	r12
    20ba:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <glcd_draw_rect_thick>
		glcd_write();
    20be:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    20c2:	88 e8       	ldi	r24, 0x88	; 136
    20c4:	93 e1       	ldi	r25, 0x13	; 19
    20c6:	fe 01       	movw	r30, r28
    20c8:	31 97       	sbiw	r30, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	d9 f7       	brne	.-10     	; 0x20c6 <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    20d0:	80 91 66 01 	lds	r24, 0x0166
    20d4:	88 23       	and	r24, r24
    20d6:	09 f0       	breq	.+2      	; 0x20da <glcd_test_rectangles+0xc4>
    20d8:	62 c0       	rjmp	.+196    	; 0x219e <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	44 e1       	ldi	r20, 0x14	; 20
    20e0:	24 e1       	ldi	r18, 0x14	; 20
    20e2:	02 e0       	ldi	r16, 0x02	; 2
    20e4:	32 e0       	ldi	r19, 0x02	; 2
    20e6:	e3 2e       	mov	r14, r19
    20e8:	cc 24       	eor	r12, r12
    20ea:	c3 94       	inc	r12
    20ec:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <glcd_draw_rect_thick>
		glcd_write();
    20f0:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    20f4:	88 e8       	ldi	r24, 0x88	; 136
    20f6:	93 e1       	ldi	r25, 0x13	; 19
    20f8:	fe 01       	movw	r30, r28
    20fa:	31 97       	sbiw	r30, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	d9 f7       	brne	.-10     	; 0x20f8 <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    2102:	80 91 66 01 	lds	r24, 0x0166
    2106:	88 23       	and	r24, r24
    2108:	09 f0       	breq	.+2      	; 0x210c <glcd_test_rectangles+0xf6>
    210a:	49 c0       	rjmp	.+146    	; 0x219e <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    210c:	84 e6       	ldi	r24, 0x64	; 100
    210e:	6a e0       	ldi	r22, 0x0A	; 10
    2110:	44 e1       	ldi	r20, 0x14	; 20
    2112:	24 e1       	ldi	r18, 0x14	; 20
    2114:	05 e0       	ldi	r16, 0x05	; 5
    2116:	95 e0       	ldi	r25, 0x05	; 5
    2118:	e9 2e       	mov	r14, r25
    211a:	cc 24       	eor	r12, r12
    211c:	c3 94       	inc	r12
    211e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <glcd_draw_rect_thick>
		glcd_write();
    2122:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    2126:	88 e8       	ldi	r24, 0x88	; 136
    2128:	93 e1       	ldi	r25, 0x13	; 19
    212a:	fe 01       	movw	r30, r28
    212c:	31 97       	sbiw	r30, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	d9 f7       	brne	.-10     	; 0x212a <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    2134:	80 91 66 01 	lds	r24, 0x0166
    2138:	88 23       	and	r24, r24
    213a:	89 f5       	brne	.+98     	; 0x219e <glcd_test_rectangles+0x188>

		glcd_clear();
    213c:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	69 e0       	ldi	r22, 0x09	; 9
    2144:	40 e4       	ldi	r20, 0x40	; 64
    2146:	51 e0       	ldi	r21, 0x01	; 1
    2148:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	4d e2       	ldi	r20, 0x2D	; 45
    2152:	2e e1       	ldi	r18, 0x1E	; 30
    2154:	01 e0       	ldi	r16, 0x01	; 1
    2156:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <glcd_draw_rect_shadow>
		glcd_write();
    215a:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    215e:	88 e8       	ldi	r24, 0x88	; 136
    2160:	93 e1       	ldi	r25, 0x13	; 19
    2162:	fe 01       	movw	r30, r28
    2164:	31 97       	sbiw	r30, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	d9 f7       	brne	.-10     	; 0x2162 <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    216c:	80 91 66 01 	lds	r24, 0x0166
    2170:	88 23       	and	r24, r24
    2172:	a9 f4       	brne	.+42     	; 0x219e <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2174:	8f e5       	ldi	r24, 0x5F	; 95
    2176:	65 e0       	ldi	r22, 0x05	; 5
    2178:	4e e1       	ldi	r20, 0x1E	; 30
    217a:	2e e1       	ldi	r18, 0x1E	; 30
    217c:	01 e0       	ldi	r16, 0x01	; 1
    217e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <glcd_draw_rect_shadow>
		glcd_write();
    2182:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    2186:	88 e8       	ldi	r24, 0x88	; 136
    2188:	93 e1       	ldi	r25, 0x13	; 19
    218a:	fe 01       	movw	r30, r28
    218c:	31 97       	sbiw	r30, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	d9 f7       	brne	.-10     	; 0x218a <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    2194:	80 91 66 01 	lds	r24, 0x0166
    2198:	88 23       	and	r24, r24
    219a:	09 f4       	brne	.+2      	; 0x219e <glcd_test_rectangles+0x188>
    219c:	5e cf       	rjmp	.-324    	; 0x205a <glcd_test_rectangles+0x44>
    219e:	10 92 66 01 	sts	0x0166, r1
		
	}
	
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	0f 91       	pop	r16
    21a8:	ef 90       	pop	r14
    21aa:	cf 90       	pop	r12
    21ac:	08 95       	ret

000021ae <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	2f 97       	sbiw	r28, 0x0f	; 15
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    21d0:	88 ec       	ldi	r24, 0xC8	; 200
    21d2:	97 e0       	ldi	r25, 0x07	; 7
    21d4:	65 e0       	ldi	r22, 0x05	; 5
    21d6:	47 e0       	ldi	r20, 0x07	; 7
    21d8:	20 e2       	ldi	r18, 0x20	; 32
    21da:	0f e7       	ldi	r16, 0x7F	; 127
    21dc:	0e 94 b3 12 	call	0x2566	; 0x2566 <glcd_tiny_set_font>
    21e0:	00 e2       	ldi	r16, 0x20	; 32
    21e2:	7e 01       	movw	r14, r28
    21e4:	08 94       	sec
    21e6:	e1 1c       	adc	r14, r1
    21e8:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    21ea:	7f e0       	ldi	r23, 0x0F	; 15
    21ec:	a7 2e       	mov	r10, r23
    21ee:	b1 2c       	mov	r11, r1
    21f0:	ac 0e       	add	r10, r28
    21f2:	bd 1e       	adc	r11, r29
    21f4:	60 e9       	ldi	r22, 0x90	; 144
    21f6:	c6 2e       	mov	r12, r22
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    21fc:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    21fe:	00 83       	st	Z, r16
			c++;
    2200:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    2202:	07 fd       	sbrc	r16, 7
    2204:	00 e2       	ldi	r16, 0x20	; 32
    2206:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2208:	ea 15       	cp	r30, r10
    220a:	fb 05       	cpc	r31, r11
    220c:	c1 f7       	brne	.-16     	; 0x21fe <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    220e:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2210:	c7 01       	movw	r24, r14
    2212:	0e 94 39 14 	call	0x2872	; 0x2872 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2216:	80 91 66 01 	lds	r24, 0x0166
    221a:	88 23       	and	r24, r24
    221c:	91 f0       	breq	.+36     	; 0x2242 <glcd_test_tiny_text+0x94>
    221e:	10 92 66 01 	sts	0x0166, r1
		
		delay_ms(1000);
	}

}
    2222:	2f 96       	adiw	r28, 0x0f	; 15
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	bf 90       	pop	r11
    223e:	af 90       	pop	r10
    2240:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    2242:	80 e1       	ldi	r24, 0x10	; 16
    2244:	97 e2       	ldi	r25, 0x27	; 39
    2246:	f6 01       	movw	r30, r12
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	d9 f7       	brne	.-10     	; 0x2246 <glcd_test_tiny_text+0x98>
    2250:	d5 cf       	rjmp	.-86     	; 0x21fc <glcd_test_tiny_text+0x4e>

00002252 <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    225a:	88 ea       	ldi	r24, 0xA8	; 168
    225c:	99 e0       	ldi	r25, 0x09	; 9
    225e:	6f e0       	ldi	r22, 0x0F	; 15
    2260:	45 e1       	ldi	r20, 0x15	; 21
    2262:	2e e2       	ldi	r18, 0x2E	; 46
    2264:	09 e3       	ldi	r16, 0x39	; 57
    2266:	0e 94 43 09 	call	0x1286	; 0x1286 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    226a:	1e e2       	ldi	r17, 0x2E	; 46
    226c:	80 91 6b 03 	lds	r24, 0x036B
    2270:	18 1b       	sub	r17, r24
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	c0 e9       	ldi	r28, 0x90	; 144
    2276:	d1 e0       	ldi	r29, 0x01	; 1
    2278:	16 c0       	rjmp	.+44     	; 0x22a6 <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    227a:	80 91 66 01 	lds	r24, 0x0166
    227e:	88 23       	and	r24, r24
    2280:	d1 f4       	brne	.+52     	; 0x22b6 <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    2282:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	60 2f       	mov	r22, r16
    228a:	46 e5       	ldi	r20, 0x56	; 86
    228c:	51 e0       	ldi	r21, 0x01	; 1
    228e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <glcd_draw_string_xy>
			glcd_write();
    2292:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    2296:	80 e2       	ldi	r24, 0x20	; 32
    2298:	93 e0       	ldi	r25, 0x03	; 3
    229a:	fe 01       	movw	r30, r28
    229c:	31 97       	sbiw	r30, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	d9 f7       	brne	.-10     	; 0x229a <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    22a4:	0f 5f       	subi	r16, 0xFF	; 255
    22a6:	01 17       	cp	r16, r17
    22a8:	40 f3       	brcs	.-48     	; 0x227a <glcd_test_text_up_down+0x28>
    22aa:	01 2f       	mov	r16, r17
    22ac:	1d c0       	rjmp	.+58     	; 0x22e8 <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    22ae:	80 91 66 01 	lds	r24, 0x0166
    22b2:	88 23       	and	r24, r24
    22b4:	39 f0       	breq	.+14     	; 0x22c4 <glcd_test_text_up_down+0x72>
    22b6:	10 92 66 01 	sts	0x0166, r1
			delay_ms(80);
		}
		
	}

}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    22c4:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	60 2f       	mov	r22, r16
    22cc:	4a e5       	ldi	r20, 0x5A	; 90
    22ce:	51 e0       	ldi	r21, 0x01	; 1
    22d0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <glcd_draw_string_xy>
			glcd_write();
    22d4:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	93 e0       	ldi	r25, 0x03	; 3
    22dc:	fe 01       	movw	r30, r28
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e4:	d9 f7       	brne	.-10     	; 0x22dc <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    22e6:	01 50       	subi	r16, 0x01	; 1
    22e8:	00 23       	and	r16, r16
    22ea:	09 f7       	brne	.-62     	; 0x22ae <glcd_test_text_up_down+0x5c>
    22ec:	dc cf       	rjmp	.-72     	; 0x22a6 <glcd_test_text_up_down+0x54>

000022ee <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	0f 93       	push	r16
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	28 97       	sbiw	r28, 0x08	; 8
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    2312:	19 82       	std	Y+1, r1	; 0x01
    2314:	1a 82       	std	Y+2, r1	; 0x02
    2316:	1b 82       	std	Y+3, r1	; 0x03
    2318:	1c 82       	std	Y+4, r1	; 0x04
    231a:	1d 82       	std	Y+5, r1	; 0x05
    231c:	1e 82       	std	Y+6, r1	; 0x06
    231e:	1f 82       	std	Y+7, r1	; 0x07
    2320:	18 86       	std	Y+8, r1	; 0x08
    2322:	cc 24       	eor	r12, r12
    2324:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2326:	5e 01       	movw	r10, r28
    2328:	08 94       	sec
    232a:	a1 1c       	adc	r10, r1
    232c:	b1 1c       	adc	r11, r1
    232e:	fe e5       	ldi	r31, 0x5E	; 94
    2330:	8f 2e       	mov	r8, r31
    2332:	f1 e0       	ldi	r31, 0x01	; 1
    2334:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2336:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    233a:	80 e6       	ldi	r24, 0x60	; 96
    233c:	96 e0       	ldi	r25, 0x06	; 6
    233e:	6c e0       	ldi	r22, 0x0C	; 12
    2340:	43 e1       	ldi	r20, 0x13	; 19
    2342:	20 e3       	ldi	r18, 0x30	; 48
    2344:	09 e3       	ldi	r16, 0x39	; 57
    2346:	e2 e0       	ldi	r30, 0x02	; 2
    2348:	ee 2e       	mov	r14, r30
    234a:	0e 94 55 09 	call	0x12aa	; 0x12aa <glcd_font>

		sprintf(string,"%d",count);
    234e:	00 d0       	rcall	.+0      	; 0x2350 <glcd_test_glcdutils+0x62>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <glcd_test_glcdutils+0x64>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <glcd_test_glcdutils+0x66>
    2354:	ed b7       	in	r30, 0x3d	; 61
    2356:	fe b7       	in	r31, 0x3e	; 62
    2358:	31 96       	adiw	r30, 0x01	; 1
    235a:	ad b7       	in	r26, 0x3d	; 61
    235c:	be b7       	in	r27, 0x3e	; 62
    235e:	12 96       	adiw	r26, 0x02	; 2
    2360:	bc 92       	st	X, r11
    2362:	ae 92       	st	-X, r10
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	93 82       	std	Z+3, r9	; 0x03
    2368:	82 82       	std	Z+2, r8	; 0x02
    236a:	d5 82       	std	Z+5, r13	; 0x05
    236c:	c4 82       	std	Z+4, r12	; 0x04
    236e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <sprintf>
		glcd_draw_string_xy(0,0,string);
    2372:	8d b7       	in	r24, 0x3d	; 61
    2374:	9e b7       	in	r25, 0x3e	; 62
    2376:	06 96       	adiw	r24, 0x06	; 6
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	9e bf       	out	0x3e, r25	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	8d bf       	out	0x3d, r24	; 61
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	a5 01       	movw	r20, r10
    2388:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <glcd_draw_string_xy>
		glcd_write();
    238c:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
		
		count += 1;
    2390:	08 94       	sec
    2392:	c1 1c       	adc	r12, r1
    2394:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    2396:	80 91 66 01 	lds	r24, 0x0166
    239a:	88 23       	and	r24, r24
    239c:	61 f2       	breq	.-104    	; 0x2336 <glcd_test_glcdutils+0x48>
    239e:	10 92 66 01 	sts	0x0166, r1
	}
}
    23a2:	28 96       	adiw	r28, 0x08	; 8
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	0f 91       	pop	r16
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	bf 90       	pop	r11
    23bc:	af 90       	pop	r10
    23be:	9f 90       	pop	r9
    23c0:	8f 90       	pop	r8
    23c2:	08 95       	ret

000023c4 <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    23c4:	8f 92       	push	r8
    23c6:	9f 92       	push	r9
    23c8:	af 92       	push	r10
    23ca:	bf 92       	push	r11
    23cc:	df 92       	push	r13
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	28 97       	sbiw	r28, 0x08	; 8
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    23ea:	19 82       	std	Y+1, r1	; 0x01
    23ec:	1a 82       	std	Y+2, r1	; 0x02
    23ee:	1b 82       	std	Y+3, r1	; 0x03
    23f0:	1c 82       	std	Y+4, r1	; 0x04
    23f2:	1d 82       	std	Y+5, r1	; 0x05
    23f4:	1e 82       	std	Y+6, r1	; 0x06
    23f6:	1f 82       	std	Y+7, r1	; 0x07
    23f8:	18 86       	std	Y+8, r1	; 0x08
    23fa:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    23fc:	5e 01       	movw	r10, r28
    23fe:	08 94       	sec
    2400:	a1 1c       	adc	r10, r1
    2402:	b1 1c       	adc	r11, r1
    2404:	1e e5       	ldi	r17, 0x5E	; 94
    2406:	81 2e       	mov	r8, r17
    2408:	11 e0       	ldi	r17, 0x01	; 1
    240a:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    240c:	0e 94 c0 06 	call	0xd80	; 0xd80 <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2410:	88 ea       	ldi	r24, 0xA8	; 168
    2412:	99 e0       	ldi	r25, 0x09	; 9
    2414:	6f e0       	ldi	r22, 0x0F	; 15
    2416:	45 e1       	ldi	r20, 0x15	; 21
    2418:	2e e2       	ldi	r18, 0x2E	; 46
    241a:	09 e3       	ldi	r16, 0x39	; 57
    241c:	0e 94 43 09 	call	0x1286	; 0x1286 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2420:	ed 2c       	mov	r14, r13
    2422:	ff 24       	eor	r15, r15
    2424:	00 d0       	rcall	.+0      	; 0x2426 <glcd_test_counter_and_graph+0x62>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <glcd_test_counter_and_graph+0x64>
    2428:	00 d0       	rcall	.+0      	; 0x242a <glcd_test_counter_and_graph+0x66>
    242a:	ed b7       	in	r30, 0x3d	; 61
    242c:	fe b7       	in	r31, 0x3e	; 62
    242e:	31 96       	adiw	r30, 0x01	; 1
    2430:	ad b7       	in	r26, 0x3d	; 61
    2432:	be b7       	in	r27, 0x3e	; 62
    2434:	12 96       	adiw	r26, 0x02	; 2
    2436:	bc 92       	st	X, r11
    2438:	ae 92       	st	-X, r10
    243a:	11 97       	sbiw	r26, 0x01	; 1
    243c:	93 82       	std	Z+3, r9	; 0x03
    243e:	82 82       	std	Z+2, r8	; 0x02
    2440:	f5 82       	std	Z+5, r15	; 0x05
    2442:	e4 82       	std	Z+4, r14	; 0x04
    2444:	0e 94 22 16 	call	0x2c44	; 0x2c44 <sprintf>
		glcd_draw_string_xy(0,0,string);
    2448:	8d b7       	in	r24, 0x3d	; 61
    244a:	9e b7       	in	r25, 0x3e	; 62
    244c:	06 96       	adiw	r24, 0x06	; 6
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	9e bf       	out	0x3e, r25	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	8d bf       	out	0x3d, r24	; 61
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	a5 01       	movw	r20, r10
    245e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    2462:	87 01       	movw	r16, r14
    2464:	00 0f       	add	r16, r16
    2466:	11 1f       	adc	r17, r17
    2468:	00 0f       	add	r16, r16
    246a:	11 1f       	adc	r17, r17
    246c:	8a e0       	ldi	r24, 0x0A	; 10
    246e:	66 e2       	ldi	r22, 0x26	; 38
    2470:	4e e1       	ldi	r20, 0x1E	; 30
    2472:	26 e0       	ldi	r18, 0x06	; 6
    2474:	0e 94 1a 09 	call	0x1234	; 0x1234 <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    2478:	ee 0c       	add	r14, r14
    247a:	ff 1c       	adc	r15, r15
    247c:	86 e4       	ldi	r24, 0x46	; 70
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	48 e0       	ldi	r20, 0x08	; 8
    2482:	2e e1       	ldi	r18, 0x1E	; 30
    2484:	0e 2d       	mov	r16, r14
    2486:	0e 94 d7 08 	call	0x11ae	; 0x11ae <glcd_bar_graph_vertical>

		glcd_write();
    248a:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
		count += 1;
    248e:	d3 94       	inc	r13

		DEMO_RETURN();
    2490:	80 91 66 01 	lds	r24, 0x0166
    2494:	88 23       	and	r24, r24
    2496:	09 f4       	brne	.+2      	; 0x249a <glcd_test_counter_and_graph+0xd6>
    2498:	b9 cf       	rjmp	.-142    	; 0x240c <glcd_test_counter_and_graph+0x48>
    249a:	10 92 66 01 	sts	0x0166, r1
	}

}
    249e:	28 96       	adiw	r28, 0x08	; 8
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	bf 90       	pop	r11
    24ba:	af 90       	pop	r10
    24bc:	9f 90       	pop	r9
    24be:	8f 90       	pop	r8
    24c0:	08 95       	ret

000024c2 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	00 e4       	ldi	r16, 0x40	; 64
    24d4:	c0 2e       	mov	r12, r16
    24d6:	0f e1       	ldi	r16, 0x1F	; 31
    24d8:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    24da:	c0 ea       	ldi	r28, 0xA0	; 160
    24dc:	df e0       	ldi	r29, 0x0F	; 15
    24de:	0e 94 d3 06 	call	0xda6	; 0xda6 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    24e2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <rand>
    24e6:	64 e5       	ldi	r22, 0x54	; 84
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    24ee:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    24f0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <rand>
    24f4:	60 e3       	ldi	r22, 0x30	; 48
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    24fc:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    24fe:	0e 94 09 16 	call	0x2c12	; 0x2c12 <rand>
    2502:	62 e3       	ldi	r22, 0x32	; 50
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    250a:	08 2f       	mov	r16, r24
    250c:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    250e:	8e 2d       	mov	r24, r14
    2510:	6f 2d       	mov	r22, r15
    2512:	41 2f       	mov	r20, r17
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <glcd_fill_circle>
			glcd_write();
    251a:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    251e:	c6 01       	movw	r24, r12
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    2524:	1f 5f       	subi	r17, 0xFF	; 255
    2526:	01 17       	cp	r16, r17
    2528:	90 f7       	brcc	.-28     	; 0x250e <glcd_test_circles+0x4c>
    252a:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    252c:	8e 2d       	mov	r24, r14
    252e:	6f 2d       	mov	r22, r15
    2530:	41 2f       	mov	r20, r17
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <glcd_fill_circle>
			glcd_write();
    2538:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
    253c:	ce 01       	movw	r24, r28
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    2542:	1f 5f       	subi	r17, 0xFF	; 255
    2544:	01 17       	cp	r16, r17
    2546:	90 f7       	brcc	.-28     	; 0x252c <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    2548:	80 91 66 01 	lds	r24, 0x0166
    254c:	88 23       	and	r24, r24
    254e:	39 f2       	breq	.-114    	; 0x24de <glcd_test_circles+0x1c>
    2550:	10 92 66 01 	sts	0x0166, r1
	}
}
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	df 90       	pop	r13
    2562:	cf 90       	pop	r12
    2564:	08 95       	ret

00002566 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    2566:	0f 93       	push	r16
	font_current.font_table = font_table;
    2568:	90 93 69 03 	sts	0x0369, r25
    256c:	80 93 68 03 	sts	0x0368, r24
	font_current.width = width;
    2570:	60 93 6a 03 	sts	0x036A, r22
	font_current.height = height;
    2574:	40 93 6b 03 	sts	0x036B, r20
	font_current.start_char = start_char;
    2578:	20 93 6c 03 	sts	0x036C, r18
	font_current.end_char = end_char;
    257c:	00 93 6d 03 	sts	0x036D, r16
	font_current.table_type = STANG;
    2580:	10 92 6e 03 	sts	0x036E, r1
}
    2584:	0f 91       	pop	r16
    2586:	08 95       	ret

00002588 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	f8 2e       	mov	r15, r24
    259c:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    259e:	5f e2       	ldi	r21, 0x2F	; 47
    25a0:	56 17       	cp	r21, r22
    25a2:	08 f4       	brcc	.+2      	; 0x25a6 <glcd_tiny_draw_char_xy+0x1e>
    25a4:	5d c0       	rjmp	.+186    	; 0x2660 <glcd_tiny_draw_char_xy+0xd8>
    25a6:	80 91 6a 03 	lds	r24, 0x036A
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	8f 0d       	add	r24, r15
    25ae:	91 1d       	adc	r25, r1
    25b0:	84 35       	cpi	r24, 0x54	; 84
    25b2:	91 05       	cpc	r25, r1
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <glcd_tiny_draw_char_xy+0x30>
    25b6:	54 c0       	rjmp	.+168    	; 0x2660 <glcd_tiny_draw_char_xy+0xd8>
    25b8:	80 91 6b 03 	lds	r24, 0x036B
    25bc:	88 30       	cpi	r24, 0x08	; 8
    25be:	08 f0       	brcs	.+2      	; 0x25c2 <glcd_tiny_draw_char_xy+0x3a>
    25c0:	4f c0       	rjmp	.+158    	; 0x2660 <glcd_tiny_draw_char_xy+0xd8>
    25c2:	80 91 6e 03 	lds	r24, 0x036E
    25c6:	88 23       	and	r24, r24
    25c8:	09 f0       	breq	.+2      	; 0x25cc <glcd_tiny_draw_char_xy+0x44>
    25ca:	4a c0       	rjmp	.+148    	; 0x2660 <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    25cc:	80 91 6c 03 	lds	r24, 0x036C
    25d0:	48 17       	cp	r20, r24
    25d2:	20 f0       	brcs	.+8      	; 0x25dc <glcd_tiny_draw_char_xy+0x54>
    25d4:	80 91 6d 03 	lds	r24, 0x036D
    25d8:	84 17       	cp	r24, r20
    25da:	08 f4       	brcc	.+2      	; 0x25de <glcd_tiny_draw_char_xy+0x56>
    25dc:	4e e2       	ldi	r20, 0x2E	; 46
    25de:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    25e0:	c4 2e       	mov	r12, r20
    25e2:	dd 24       	eor	r13, r13
    25e4:	2f c0       	rjmp	.+94     	; 0x2644 <glcd_tiny_draw_char_xy+0xbc>
    25e6:	80 91 6c 03 	lds	r24, 0x036C
    25ea:	96 01       	movw	r18, r12
    25ec:	28 1b       	sub	r18, r24
    25ee:	31 09       	sbc	r19, r1
    25f0:	84 2f       	mov	r24, r20
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	ac 01       	movw	r20, r24
    25f6:	24 9f       	mul	r18, r20
    25f8:	c0 01       	movw	r24, r0
    25fa:	25 9f       	mul	r18, r21
    25fc:	90 0d       	add	r25, r0
    25fe:	34 9f       	mul	r19, r20
    2600:	90 0d       	add	r25, r0
    2602:	11 24       	eor	r1, r1
    2604:	80 0f       	add	r24, r16
    2606:	91 1d       	adc	r25, r1
    2608:	e0 91 68 03 	lds	r30, 0x0368
    260c:	f0 91 69 03 	lds	r31, 0x0369
    2610:	e8 0f       	add	r30, r24
    2612:	f9 1f       	adc	r31, r25
    2614:	e4 91       	lpm	r30, Z+
    2616:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    2618:	ce 2f       	mov	r28, r30
    261a:	d0 e0       	ldi	r29, 0x00	; 0
    261c:	0e c0       	rjmp	.+28     	; 0x263a <glcd_tiny_draw_char_xy+0xb2>
    261e:	61 2f       	mov	r22, r17
    2620:	6e 0d       	add	r22, r14
    2622:	ae 01       	movw	r20, r28
    2624:	01 2e       	mov	r0, r17
    2626:	02 c0       	rjmp	.+4      	; 0x262c <glcd_tiny_draw_char_xy+0xa4>
    2628:	55 95       	asr	r21
    262a:	47 95       	ror	r20
    262c:	0a 94       	dec	r0
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <glcd_tiny_draw_char_xy+0xa0>
    2630:	41 70       	andi	r20, 0x01	; 1
    2632:	8b 2d       	mov	r24, r11
    2634:	0e 94 14 0c 	call	0x1828	; 0x1828 <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    2638:	1f 5f       	subi	r17, 0xFF	; 255
    263a:	80 91 6b 03 	lds	r24, 0x036B
    263e:	18 17       	cp	r17, r24
    2640:	70 f3       	brcs	.-36     	; 0x261e <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    2642:	0f 5f       	subi	r16, 0xFF	; 255
    2644:	b0 2e       	mov	r11, r16
    2646:	bf 0c       	add	r11, r15
    2648:	40 91 6a 03 	lds	r20, 0x036A
    264c:	04 17       	cp	r16, r20
    264e:	58 f2       	brcs	.-106    	; 0x25e6 <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    2650:	4f 0d       	add	r20, r15
    2652:	20 91 6b 03 	lds	r18, 0x036B
    2656:	2e 0d       	add	r18, r14
    2658:	8f 2d       	mov	r24, r15
    265a:	6e 2d       	mov	r22, r14
    265c:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	
}
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	bf 90       	pop	r11
    2672:	08 95       	ret

00002674 <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	08 2f       	mov	r16, r24
    267e:	26 2f       	mov	r18, r22
    2680:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    2682:	60 91 6b 03 	lds	r22, 0x036B
    2686:	68 30       	cpi	r22, 0x08	; 8
    2688:	08 f0       	brcs	.+2      	; 0x268c <glcd_tiny_draw_char+0x18>
    268a:	6a c0       	rjmp	.+212    	; 0x2760 <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    268c:	80 91 6c 03 	lds	r24, 0x036C
    2690:	48 17       	cp	r20, r24
    2692:	20 f0       	brcs	.+8      	; 0x269c <glcd_tiny_draw_char+0x28>
    2694:	80 91 6d 03 	lds	r24, 0x036D
    2698:	84 17       	cp	r24, r20
    269a:	08 f4       	brcc	.+2      	; 0x269e <glcd_tiny_draw_char+0x2a>
    269c:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    269e:	c2 2f       	mov	r28, r18
    26a0:	d0 e0       	ldi	r29, 0x00	; 0
    26a2:	e6 2f       	mov	r30, r22
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	31 96       	adiw	r30, 0x01	; 1
    26a8:	80 e3       	ldi	r24, 0x30	; 48
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	bf 01       	movw	r22, r30
    26ae:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    26b2:	c6 17       	cp	r28, r22
    26b4:	d7 07       	cpc	r29, r23
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <glcd_tiny_draw_char+0x46>
    26b8:	53 c0       	rjmp	.+166    	; 0x2760 <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    26ba:	40 91 6a 03 	lds	r20, 0x036A
    26be:	84 2f       	mov	r24, r20
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	80 0f       	add	r24, r16
    26c4:	91 1d       	adc	r25, r1
    26c6:	84 35       	cpi	r24, 0x54	; 84
    26c8:	91 05       	cpc	r25, r1
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <glcd_tiny_draw_char+0x5a>
    26cc:	49 c0       	rjmp	.+146    	; 0x2760 <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    26ce:	ce 9f       	mul	r28, r30
    26d0:	b0 01       	movw	r22, r0
    26d2:	cf 9f       	mul	r28, r31
    26d4:	70 0d       	add	r23, r0
    26d6:	de 9f       	mul	r29, r30
    26d8:	70 0d       	add	r23, r0
    26da:	11 24       	eor	r1, r1
    26dc:	40 0f       	add	r20, r16
    26de:	21 96       	adiw	r28, 0x01	; 1
    26e0:	ce 9f       	mul	r28, r30
    26e2:	90 01       	movw	r18, r0
    26e4:	cf 9f       	mul	r28, r31
    26e6:	30 0d       	add	r19, r0
    26e8:	de 9f       	mul	r29, r30
    26ea:	30 0d       	add	r19, r0
    26ec:	11 24       	eor	r1, r1
    26ee:	21 97       	sbiw	r28, 0x01	; 1
    26f0:	80 2f       	mov	r24, r16
    26f2:	0e 94 42 06 	call	0xc84	; 0xc84 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    26f6:	84 e5       	ldi	r24, 0x54	; 84
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	c8 9f       	mul	r28, r24
    26fc:	d0 01       	movw	r26, r0
    26fe:	c9 9f       	mul	r28, r25
    2700:	b0 0d       	add	r27, r0
    2702:	d8 9f       	mul	r29, r24
    2704:	b0 0d       	add	r27, r0
    2706:	11 24       	eor	r1, r1
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	61 2f       	mov	r22, r17
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	22 c0       	rjmp	.+68     	; 0x2754 <glcd_tiny_draw_char+0xe0>
    2710:	80 91 6c 03 	lds	r24, 0x036C
    2714:	9b 01       	movw	r18, r22
    2716:	28 1b       	sub	r18, r24
    2718:	31 09       	sbc	r19, r1
    271a:	89 2f       	mov	r24, r25
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	fc 01       	movw	r30, r24
    2720:	2e 9f       	mul	r18, r30
    2722:	c0 01       	movw	r24, r0
    2724:	2f 9f       	mul	r18, r31
    2726:	90 0d       	add	r25, r0
    2728:	3e 9f       	mul	r19, r30
    272a:	90 0d       	add	r25, r0
    272c:	11 24       	eor	r1, r1
    272e:	85 0f       	add	r24, r21
    2730:	91 1d       	adc	r25, r1
    2732:	e0 91 68 03 	lds	r30, 0x0368
    2736:	f0 91 69 03 	lds	r31, 0x0369
    273a:	e8 0f       	add	r30, r24
    273c:	f9 1f       	adc	r31, r25
    273e:	84 91       	lpm	r24, Z+
    2740:	e0 91 64 03 	lds	r30, 0x0364
    2744:	f0 91 65 03 	lds	r31, 0x0365
    2748:	ea 0f       	add	r30, r26
    274a:	fb 1f       	adc	r31, r27
    274c:	e4 0f       	add	r30, r20
    274e:	f1 1d       	adc	r31, r1
    2750:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    2752:	5f 5f       	subi	r21, 0xFF	; 255
    2754:	45 2f       	mov	r20, r21
    2756:	40 0f       	add	r20, r16
    2758:	90 91 6a 03 	lds	r25, 0x036A
    275c:	59 17       	cp	r21, r25
    275e:	c0 f2       	brcs	.-80     	; 0x2710 <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret

0000276a <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	18 2f       	mov	r17, r24
    2774:	06 2f       	mov	r16, r22
    2776:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2778:	80 91 6b 03 	lds	r24, 0x036B
    277c:	88 30       	cpi	r24, 0x08	; 8
    277e:	20 f5       	brcc	.+72     	; 0x27c8 <glcd_tiny_draw_string_P+0x5e>
		return;
    2780:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    2782:	21 96       	adiw	r28, 0x01	; 1
    2784:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    2786:	44 23       	and	r20, r20
    2788:	f9 f0       	breq	.+62     	; 0x27c8 <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    278a:	81 2f       	mov	r24, r17
    278c:	60 2f       	mov	r22, r16
    278e:	0e 94 3a 13 	call	0x2674	; 0x2674 <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    2792:	80 91 6a 03 	lds	r24, 0x036A
    2796:	8f 5f       	subi	r24, 0xFF	; 255
    2798:	18 0f       	add	r17, r24
    279a:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	81 0f       	add	r24, r17
    27a0:	91 1d       	adc	r25, r1
    27a2:	84 35       	cpi	r24, 0x54	; 84
    27a4:	91 05       	cpc	r25, r1
    27a6:	14 f0       	brlt	.+4      	; 0x27ac <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    27a8:	0f 5f       	subi	r16, 0xFF	; 255
    27aa:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    27ac:	20 2f       	mov	r18, r16
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	60 91 6b 03 	lds	r22, 0x036B
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	6f 5f       	subi	r22, 0xFF	; 255
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    27c2:	26 17       	cp	r18, r22
    27c4:	37 07       	cpc	r19, r23
    27c6:	e4 f2       	brlt	.-72     	; 0x2780 <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	18 2f       	mov	r17, r24
    27dc:	06 2f       	mov	r16, r22
    27de:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    27e0:	80 91 6b 03 	lds	r24, 0x036B
    27e4:	88 30       	cpi	r24, 0x08	; 8
    27e6:	08 f1       	brcs	.+66     	; 0x282a <glcd_tiny_draw_string+0x58>
    27e8:	23 c0       	rjmp	.+70     	; 0x2830 <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    27ea:	81 2f       	mov	r24, r17
    27ec:	60 2f       	mov	r22, r16
    27ee:	0e 94 3a 13 	call	0x2674	; 0x2674 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    27f2:	80 91 6a 03 	lds	r24, 0x036A
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	18 0f       	add	r17, r24
    27fa:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	81 0f       	add	r24, r17
    2800:	91 1d       	adc	r25, r1
    2802:	84 35       	cpi	r24, 0x54	; 84
    2804:	91 05       	cpc	r25, r1
    2806:	14 f0       	brlt	.+4      	; 0x280c <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    2808:	0f 5f       	subi	r16, 0xFF	; 255
    280a:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    280c:	20 2f       	mov	r18, r16
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	60 91 6b 03 	lds	r22, 0x036B
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	80 e3       	ldi	r24, 0x30	; 48
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__divmodhi4>
    2822:	26 17       	cp	r18, r22
    2824:	37 07       	cpc	r19, r23
    2826:	24 f4       	brge	.+8      	; 0x2830 <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2828:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    282a:	48 81       	ld	r20, Y
    282c:	44 23       	and	r20, r20
    282e:	e9 f6       	brne	.-70     	; 0x27ea <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    283a:	68 2f       	mov	r22, r24
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	66 0f       	add	r22, r22
    2842:	77 1f       	adc	r23, r23
    2844:	8a 95       	dec	r24
    2846:	e1 f7       	brne	.-8      	; 0x2840 <glcd_tiny_invert_line+0x6>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	43 e5       	ldi	r20, 0x53	; 83
    284c:	28 e0       	ldi	r18, 0x08	; 8
    284e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <glcd_invert_area>
}
    2852:	08 95       	ret

00002854 <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    285a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	65 e0       	ldi	r22, 0x05	; 5
    2862:	a8 01       	movw	r20, r16
    2864:	0e 94 b5 13 	call	0x276a	; 0x276a <glcd_tiny_draw_string_P>
	glcd_write();
    2868:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
}
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    2878:	0e 94 8f 06 	call	0xd1e	; 0xd1e <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	65 e0       	ldi	r22, 0x05	; 5
    2880:	a8 01       	movw	r20, r16
    2882:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <glcd_tiny_draw_string>
	glcd_write();
    2886:	0e 94 28 07 	call	0xe50	; 0xe50 <glcd_write>
}
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	08 95       	ret

00002890 <__cmpsf2>:
    2890:	6c d0       	rcall	.+216    	; 0x296a <__fp_cmp>
    2892:	08 f4       	brcc	.+2      	; 0x2896 <__cmpsf2+0x6>
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	08 95       	ret

00002898 <__fixunssfsi>:
    2898:	94 d0       	rcall	.+296    	; 0x29c2 <__fp_splitA>
    289a:	88 f0       	brcs	.+34     	; 0x28be <__fixunssfsi+0x26>
    289c:	9f 57       	subi	r25, 0x7F	; 127
    289e:	90 f0       	brcs	.+36     	; 0x28c4 <__fixunssfsi+0x2c>
    28a0:	b9 2f       	mov	r27, r25
    28a2:	99 27       	eor	r25, r25
    28a4:	b7 51       	subi	r27, 0x17	; 23
    28a6:	a0 f0       	brcs	.+40     	; 0x28d0 <__fixunssfsi+0x38>
    28a8:	d1 f0       	breq	.+52     	; 0x28de <__fixunssfsi+0x46>
    28aa:	66 0f       	add	r22, r22
    28ac:	77 1f       	adc	r23, r23
    28ae:	88 1f       	adc	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	1a f0       	brmi	.+6      	; 0x28ba <__fixunssfsi+0x22>
    28b4:	ba 95       	dec	r27
    28b6:	c9 f7       	brne	.-14     	; 0x28aa <__fixunssfsi+0x12>
    28b8:	12 c0       	rjmp	.+36     	; 0x28de <__fixunssfsi+0x46>
    28ba:	b1 30       	cpi	r27, 0x01	; 1
    28bc:	81 f0       	breq	.+32     	; 0x28de <__fixunssfsi+0x46>
    28be:	9b d0       	rcall	.+310    	; 0x29f6 <__fp_zero>
    28c0:	b1 e0       	ldi	r27, 0x01	; 1
    28c2:	08 95       	ret
    28c4:	98 c0       	rjmp	.+304    	; 0x29f6 <__fp_zero>
    28c6:	67 2f       	mov	r22, r23
    28c8:	78 2f       	mov	r23, r24
    28ca:	88 27       	eor	r24, r24
    28cc:	b8 5f       	subi	r27, 0xF8	; 248
    28ce:	39 f0       	breq	.+14     	; 0x28de <__fixunssfsi+0x46>
    28d0:	b9 3f       	cpi	r27, 0xF9	; 249
    28d2:	cc f3       	brlt	.-14     	; 0x28c6 <__fixunssfsi+0x2e>
    28d4:	86 95       	lsr	r24
    28d6:	77 95       	ror	r23
    28d8:	67 95       	ror	r22
    28da:	b3 95       	inc	r27
    28dc:	d9 f7       	brne	.-10     	; 0x28d4 <__fixunssfsi+0x3c>
    28de:	3e f4       	brtc	.+14     	; 0x28ee <__fixunssfsi+0x56>
    28e0:	90 95       	com	r25
    28e2:	80 95       	com	r24
    28e4:	70 95       	com	r23
    28e6:	61 95       	neg	r22
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	8f 4f       	sbci	r24, 0xFF	; 255
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	08 95       	ret

000028f0 <__floatunsisf>:
    28f0:	e8 94       	clt
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <__floatsisf+0x12>

000028f4 <__floatsisf>:
    28f4:	97 fb       	bst	r25, 7
    28f6:	3e f4       	brtc	.+14     	; 0x2906 <__floatsisf+0x12>
    28f8:	90 95       	com	r25
    28fa:	80 95       	com	r24
    28fc:	70 95       	com	r23
    28fe:	61 95       	neg	r22
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	8f 4f       	sbci	r24, 0xFF	; 255
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	99 23       	and	r25, r25
    2908:	a9 f0       	breq	.+42     	; 0x2934 <__floatsisf+0x40>
    290a:	f9 2f       	mov	r31, r25
    290c:	96 e9       	ldi	r25, 0x96	; 150
    290e:	bb 27       	eor	r27, r27
    2910:	93 95       	inc	r25
    2912:	f6 95       	lsr	r31
    2914:	87 95       	ror	r24
    2916:	77 95       	ror	r23
    2918:	67 95       	ror	r22
    291a:	b7 95       	ror	r27
    291c:	f1 11       	cpse	r31, r1
    291e:	f8 cf       	rjmp	.-16     	; 0x2910 <__floatsisf+0x1c>
    2920:	fa f4       	brpl	.+62     	; 0x2960 <__floatsisf+0x6c>
    2922:	bb 0f       	add	r27, r27
    2924:	11 f4       	brne	.+4      	; 0x292a <__floatsisf+0x36>
    2926:	60 ff       	sbrs	r22, 0
    2928:	1b c0       	rjmp	.+54     	; 0x2960 <__floatsisf+0x6c>
    292a:	6f 5f       	subi	r22, 0xFF	; 255
    292c:	7f 4f       	sbci	r23, 0xFF	; 255
    292e:	8f 4f       	sbci	r24, 0xFF	; 255
    2930:	9f 4f       	sbci	r25, 0xFF	; 255
    2932:	16 c0       	rjmp	.+44     	; 0x2960 <__floatsisf+0x6c>
    2934:	88 23       	and	r24, r24
    2936:	11 f0       	breq	.+4      	; 0x293c <__floatsisf+0x48>
    2938:	96 e9       	ldi	r25, 0x96	; 150
    293a:	11 c0       	rjmp	.+34     	; 0x295e <__floatsisf+0x6a>
    293c:	77 23       	and	r23, r23
    293e:	21 f0       	breq	.+8      	; 0x2948 <__floatsisf+0x54>
    2940:	9e e8       	ldi	r25, 0x8E	; 142
    2942:	87 2f       	mov	r24, r23
    2944:	76 2f       	mov	r23, r22
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <__floatsisf+0x5e>
    2948:	66 23       	and	r22, r22
    294a:	71 f0       	breq	.+28     	; 0x2968 <__floatsisf+0x74>
    294c:	96 e8       	ldi	r25, 0x86	; 134
    294e:	86 2f       	mov	r24, r22
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	2a f0       	brmi	.+10     	; 0x2960 <__floatsisf+0x6c>
    2956:	9a 95       	dec	r25
    2958:	66 0f       	add	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	88 1f       	adc	r24, r24
    295e:	da f7       	brpl	.-10     	; 0x2956 <__floatsisf+0x62>
    2960:	88 0f       	add	r24, r24
    2962:	96 95       	lsr	r25
    2964:	87 95       	ror	r24
    2966:	97 f9       	bld	r25, 7
    2968:	08 95       	ret

0000296a <__fp_cmp>:
    296a:	99 0f       	add	r25, r25
    296c:	00 08       	sbc	r0, r0
    296e:	55 0f       	add	r21, r21
    2970:	aa 0b       	sbc	r26, r26
    2972:	e0 e8       	ldi	r30, 0x80	; 128
    2974:	fe ef       	ldi	r31, 0xFE	; 254
    2976:	16 16       	cp	r1, r22
    2978:	17 06       	cpc	r1, r23
    297a:	e8 07       	cpc	r30, r24
    297c:	f9 07       	cpc	r31, r25
    297e:	c0 f0       	brcs	.+48     	; 0x29b0 <__fp_cmp+0x46>
    2980:	12 16       	cp	r1, r18
    2982:	13 06       	cpc	r1, r19
    2984:	e4 07       	cpc	r30, r20
    2986:	f5 07       	cpc	r31, r21
    2988:	98 f0       	brcs	.+38     	; 0x29b0 <__fp_cmp+0x46>
    298a:	62 1b       	sub	r22, r18
    298c:	73 0b       	sbc	r23, r19
    298e:	84 0b       	sbc	r24, r20
    2990:	95 0b       	sbc	r25, r21
    2992:	39 f4       	brne	.+14     	; 0x29a2 <__fp_cmp+0x38>
    2994:	0a 26       	eor	r0, r26
    2996:	61 f0       	breq	.+24     	; 0x29b0 <__fp_cmp+0x46>
    2998:	23 2b       	or	r18, r19
    299a:	24 2b       	or	r18, r20
    299c:	25 2b       	or	r18, r21
    299e:	21 f4       	brne	.+8      	; 0x29a8 <__fp_cmp+0x3e>
    29a0:	08 95       	ret
    29a2:	0a 26       	eor	r0, r26
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <__fp_cmp+0x3e>
    29a6:	a1 40       	sbci	r26, 0x01	; 1
    29a8:	a6 95       	lsr	r26
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	81 1d       	adc	r24, r1
    29ae:	81 1d       	adc	r24, r1
    29b0:	08 95       	ret

000029b2 <__fp_split3>:
    29b2:	57 fd       	sbrc	r21, 7
    29b4:	90 58       	subi	r25, 0x80	; 128
    29b6:	44 0f       	add	r20, r20
    29b8:	55 1f       	adc	r21, r21
    29ba:	59 f0       	breq	.+22     	; 0x29d2 <__fp_splitA+0x10>
    29bc:	5f 3f       	cpi	r21, 0xFF	; 255
    29be:	71 f0       	breq	.+28     	; 0x29dc <__fp_splitA+0x1a>
    29c0:	47 95       	ror	r20

000029c2 <__fp_splitA>:
    29c2:	88 0f       	add	r24, r24
    29c4:	97 fb       	bst	r25, 7
    29c6:	99 1f       	adc	r25, r25
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <__fp_splitA+0x20>
    29ca:	9f 3f       	cpi	r25, 0xFF	; 255
    29cc:	79 f0       	breq	.+30     	; 0x29ec <__fp_splitA+0x2a>
    29ce:	87 95       	ror	r24
    29d0:	08 95       	ret
    29d2:	12 16       	cp	r1, r18
    29d4:	13 06       	cpc	r1, r19
    29d6:	14 06       	cpc	r1, r20
    29d8:	55 1f       	adc	r21, r21
    29da:	f2 cf       	rjmp	.-28     	; 0x29c0 <__fp_split3+0xe>
    29dc:	46 95       	lsr	r20
    29de:	f1 df       	rcall	.-30     	; 0x29c2 <__fp_splitA>
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <__fp_splitA+0x30>
    29e2:	16 16       	cp	r1, r22
    29e4:	17 06       	cpc	r1, r23
    29e6:	18 06       	cpc	r1, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	f1 cf       	rjmp	.-30     	; 0x29ce <__fp_splitA+0xc>
    29ec:	86 95       	lsr	r24
    29ee:	71 05       	cpc	r23, r1
    29f0:	61 05       	cpc	r22, r1
    29f2:	08 94       	sec
    29f4:	08 95       	ret

000029f6 <__fp_zero>:
    29f6:	e8 94       	clt

000029f8 <__fp_szero>:
    29f8:	bb 27       	eor	r27, r27
    29fa:	66 27       	eor	r22, r22
    29fc:	77 27       	eor	r23, r23
    29fe:	cb 01       	movw	r24, r22
    2a00:	97 f9       	bld	r25, 7
    2a02:	08 95       	ret

00002a04 <__gesf2>:
    2a04:	b2 df       	rcall	.-156    	; 0x296a <__fp_cmp>
    2a06:	08 f4       	brcc	.+2      	; 0x2a0a <__gesf2+0x6>
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	08 95       	ret

00002a0c <__mulsf3>:
    2a0c:	0b d0       	rcall	.+22     	; 0x2a24 <__mulsf3x>
    2a0e:	78 c0       	rjmp	.+240    	; 0x2b00 <__fp_round>
    2a10:	69 d0       	rcall	.+210    	; 0x2ae4 <__fp_pscA>
    2a12:	28 f0       	brcs	.+10     	; 0x2a1e <__mulsf3+0x12>
    2a14:	6e d0       	rcall	.+220    	; 0x2af2 <__fp_pscB>
    2a16:	18 f0       	brcs	.+6      	; 0x2a1e <__mulsf3+0x12>
    2a18:	95 23       	and	r25, r21
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__mulsf3+0x12>
    2a1c:	5a c0       	rjmp	.+180    	; 0x2ad2 <__fp_inf>
    2a1e:	5f c0       	rjmp	.+190    	; 0x2ade <__fp_nan>
    2a20:	11 24       	eor	r1, r1
    2a22:	ea cf       	rjmp	.-44     	; 0x29f8 <__fp_szero>

00002a24 <__mulsf3x>:
    2a24:	c6 df       	rcall	.-116    	; 0x29b2 <__fp_split3>
    2a26:	a0 f3       	brcs	.-24     	; 0x2a10 <__mulsf3+0x4>

00002a28 <__mulsf3_pse>:
    2a28:	95 9f       	mul	r25, r21
    2a2a:	d1 f3       	breq	.-12     	; 0x2a20 <__mulsf3+0x14>
    2a2c:	95 0f       	add	r25, r21
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	55 1f       	adc	r21, r21
    2a32:	62 9f       	mul	r22, r18
    2a34:	f0 01       	movw	r30, r0
    2a36:	72 9f       	mul	r23, r18
    2a38:	bb 27       	eor	r27, r27
    2a3a:	f0 0d       	add	r31, r0
    2a3c:	b1 1d       	adc	r27, r1
    2a3e:	63 9f       	mul	r22, r19
    2a40:	aa 27       	eor	r26, r26
    2a42:	f0 0d       	add	r31, r0
    2a44:	b1 1d       	adc	r27, r1
    2a46:	aa 1f       	adc	r26, r26
    2a48:	64 9f       	mul	r22, r20
    2a4a:	66 27       	eor	r22, r22
    2a4c:	b0 0d       	add	r27, r0
    2a4e:	a1 1d       	adc	r26, r1
    2a50:	66 1f       	adc	r22, r22
    2a52:	82 9f       	mul	r24, r18
    2a54:	22 27       	eor	r18, r18
    2a56:	b0 0d       	add	r27, r0
    2a58:	a1 1d       	adc	r26, r1
    2a5a:	62 1f       	adc	r22, r18
    2a5c:	73 9f       	mul	r23, r19
    2a5e:	b0 0d       	add	r27, r0
    2a60:	a1 1d       	adc	r26, r1
    2a62:	62 1f       	adc	r22, r18
    2a64:	83 9f       	mul	r24, r19
    2a66:	a0 0d       	add	r26, r0
    2a68:	61 1d       	adc	r22, r1
    2a6a:	22 1f       	adc	r18, r18
    2a6c:	74 9f       	mul	r23, r20
    2a6e:	33 27       	eor	r19, r19
    2a70:	a0 0d       	add	r26, r0
    2a72:	61 1d       	adc	r22, r1
    2a74:	23 1f       	adc	r18, r19
    2a76:	84 9f       	mul	r24, r20
    2a78:	60 0d       	add	r22, r0
    2a7a:	21 1d       	adc	r18, r1
    2a7c:	82 2f       	mov	r24, r18
    2a7e:	76 2f       	mov	r23, r22
    2a80:	6a 2f       	mov	r22, r26
    2a82:	11 24       	eor	r1, r1
    2a84:	9f 57       	subi	r25, 0x7F	; 127
    2a86:	50 40       	sbci	r21, 0x00	; 0
    2a88:	8a f0       	brmi	.+34     	; 0x2aac <__mulsf3_pse+0x84>
    2a8a:	e1 f0       	breq	.+56     	; 0x2ac4 <__mulsf3_pse+0x9c>
    2a8c:	88 23       	and	r24, r24
    2a8e:	4a f0       	brmi	.+18     	; 0x2aa2 <__mulsf3_pse+0x7a>
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	bb 1f       	adc	r27, r27
    2a96:	66 1f       	adc	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	88 1f       	adc	r24, r24
    2a9c:	91 50       	subi	r25, 0x01	; 1
    2a9e:	50 40       	sbci	r21, 0x00	; 0
    2aa0:	a9 f7       	brne	.-22     	; 0x2a8c <__mulsf3_pse+0x64>
    2aa2:	9e 3f       	cpi	r25, 0xFE	; 254
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	70 f0       	brcs	.+28     	; 0x2ac4 <__mulsf3_pse+0x9c>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <__fp_inf>
    2aaa:	a6 cf       	rjmp	.-180    	; 0x29f8 <__fp_szero>
    2aac:	5f 3f       	cpi	r21, 0xFF	; 255
    2aae:	ec f3       	brlt	.-6      	; 0x2aaa <__mulsf3_pse+0x82>
    2ab0:	98 3e       	cpi	r25, 0xE8	; 232
    2ab2:	dc f3       	brlt	.-10     	; 0x2aaa <__mulsf3_pse+0x82>
    2ab4:	86 95       	lsr	r24
    2ab6:	77 95       	ror	r23
    2ab8:	67 95       	ror	r22
    2aba:	b7 95       	ror	r27
    2abc:	f7 95       	ror	r31
    2abe:	e7 95       	ror	r30
    2ac0:	9f 5f       	subi	r25, 0xFF	; 255
    2ac2:	c1 f7       	brne	.-16     	; 0x2ab4 <__mulsf3_pse+0x8c>
    2ac4:	fe 2b       	or	r31, r30
    2ac6:	88 0f       	add	r24, r24
    2ac8:	91 1d       	adc	r25, r1
    2aca:	96 95       	lsr	r25
    2acc:	87 95       	ror	r24
    2ace:	97 f9       	bld	r25, 7
    2ad0:	08 95       	ret

00002ad2 <__fp_inf>:
    2ad2:	97 f9       	bld	r25, 7
    2ad4:	9f 67       	ori	r25, 0x7F	; 127
    2ad6:	80 e8       	ldi	r24, 0x80	; 128
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	08 95       	ret

00002ade <__fp_nan>:
    2ade:	9f ef       	ldi	r25, 0xFF	; 255
    2ae0:	80 ec       	ldi	r24, 0xC0	; 192
    2ae2:	08 95       	ret

00002ae4 <__fp_pscA>:
    2ae4:	00 24       	eor	r0, r0
    2ae6:	0a 94       	dec	r0
    2ae8:	16 16       	cp	r1, r22
    2aea:	17 06       	cpc	r1, r23
    2aec:	18 06       	cpc	r1, r24
    2aee:	09 06       	cpc	r0, r25
    2af0:	08 95       	ret

00002af2 <__fp_pscB>:
    2af2:	00 24       	eor	r0, r0
    2af4:	0a 94       	dec	r0
    2af6:	12 16       	cp	r1, r18
    2af8:	13 06       	cpc	r1, r19
    2afa:	14 06       	cpc	r1, r20
    2afc:	05 06       	cpc	r0, r21
    2afe:	08 95       	ret

00002b00 <__fp_round>:
    2b00:	09 2e       	mov	r0, r25
    2b02:	03 94       	inc	r0
    2b04:	00 0c       	add	r0, r0
    2b06:	11 f4       	brne	.+4      	; 0x2b0c <__fp_round+0xc>
    2b08:	88 23       	and	r24, r24
    2b0a:	52 f0       	brmi	.+20     	; 0x2b20 <__fp_round+0x20>
    2b0c:	bb 0f       	add	r27, r27
    2b0e:	40 f4       	brcc	.+16     	; 0x2b20 <__fp_round+0x20>
    2b10:	bf 2b       	or	r27, r31
    2b12:	11 f4       	brne	.+4      	; 0x2b18 <__fp_round+0x18>
    2b14:	60 ff       	sbrs	r22, 0
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <__fp_round+0x20>
    2b18:	6f 5f       	subi	r22, 0xFF	; 255
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	08 95       	ret

00002b22 <__divmodhi4>:
    2b22:	97 fb       	bst	r25, 7
    2b24:	09 2e       	mov	r0, r25
    2b26:	07 26       	eor	r0, r23
    2b28:	0a d0       	rcall	.+20     	; 0x2b3e <__divmodhi4_neg1>
    2b2a:	77 fd       	sbrc	r23, 7
    2b2c:	04 d0       	rcall	.+8      	; 0x2b36 <__divmodhi4_neg2>
    2b2e:	0c d0       	rcall	.+24     	; 0x2b48 <__udivmodhi4>
    2b30:	06 d0       	rcall	.+12     	; 0x2b3e <__divmodhi4_neg1>
    2b32:	00 20       	and	r0, r0
    2b34:	1a f4       	brpl	.+6      	; 0x2b3c <__divmodhi4_exit>

00002b36 <__divmodhi4_neg2>:
    2b36:	70 95       	com	r23
    2b38:	61 95       	neg	r22
    2b3a:	7f 4f       	sbci	r23, 0xFF	; 255

00002b3c <__divmodhi4_exit>:
    2b3c:	08 95       	ret

00002b3e <__divmodhi4_neg1>:
    2b3e:	f6 f7       	brtc	.-4      	; 0x2b3c <__divmodhi4_exit>
    2b40:	90 95       	com	r25
    2b42:	81 95       	neg	r24
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	08 95       	ret

00002b48 <__udivmodhi4>:
    2b48:	aa 1b       	sub	r26, r26
    2b4a:	bb 1b       	sub	r27, r27
    2b4c:	51 e1       	ldi	r21, 0x11	; 17
    2b4e:	07 c0       	rjmp	.+14     	; 0x2b5e <__udivmodhi4_ep>

00002b50 <__udivmodhi4_loop>:
    2b50:	aa 1f       	adc	r26, r26
    2b52:	bb 1f       	adc	r27, r27
    2b54:	a6 17       	cp	r26, r22
    2b56:	b7 07       	cpc	r27, r23
    2b58:	10 f0       	brcs	.+4      	; 0x2b5e <__udivmodhi4_ep>
    2b5a:	a6 1b       	sub	r26, r22
    2b5c:	b7 0b       	sbc	r27, r23

00002b5e <__udivmodhi4_ep>:
    2b5e:	88 1f       	adc	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	5a 95       	dec	r21
    2b64:	a9 f7       	brne	.-22     	; 0x2b50 <__udivmodhi4_loop>
    2b66:	80 95       	com	r24
    2b68:	90 95       	com	r25
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	08 95       	ret

00002b70 <do_rand>:
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	ee eb       	ldi	r30, 0xBE	; 190
    2b76:	f5 e1       	ldi	r31, 0x15	; 21
    2b78:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x10>
    2b7c:	ec 01       	movw	r28, r24
    2b7e:	a8 80       	ld	r10, Y
    2b80:	b9 80       	ldd	r11, Y+1	; 0x01
    2b82:	ca 80       	ldd	r12, Y+2	; 0x02
    2b84:	db 80       	ldd	r13, Y+3	; 0x03
    2b86:	a1 14       	cp	r10, r1
    2b88:	b1 04       	cpc	r11, r1
    2b8a:	c1 04       	cpc	r12, r1
    2b8c:	d1 04       	cpc	r13, r1
    2b8e:	41 f4       	brne	.+16     	; 0x2ba0 <do_rand+0x30>
    2b90:	84 e2       	ldi	r24, 0x24	; 36
    2b92:	a8 2e       	mov	r10, r24
    2b94:	89 ed       	ldi	r24, 0xD9	; 217
    2b96:	b8 2e       	mov	r11, r24
    2b98:	8b e5       	ldi	r24, 0x5B	; 91
    2b9a:	c8 2e       	mov	r12, r24
    2b9c:	87 e0       	ldi	r24, 0x07	; 7
    2b9e:	d8 2e       	mov	r13, r24
    2ba0:	c6 01       	movw	r24, r12
    2ba2:	b5 01       	movw	r22, r10
    2ba4:	2d e1       	ldi	r18, 0x1D	; 29
    2ba6:	33 ef       	ldi	r19, 0xF3	; 243
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodsi4>
    2bb0:	27 ea       	ldi	r18, 0xA7	; 167
    2bb2:	31 e4       	ldi	r19, 0x41	; 65
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	0e 94 c3 18 	call	0x3186	; 0x3186 <__mulsi3>
    2bbc:	7b 01       	movw	r14, r22
    2bbe:	8c 01       	movw	r16, r24
    2bc0:	c6 01       	movw	r24, r12
    2bc2:	b5 01       	movw	r22, r10
    2bc4:	2d e1       	ldi	r18, 0x1D	; 29
    2bc6:	33 ef       	ldi	r19, 0xF3	; 243
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodsi4>
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	2c ee       	ldi	r18, 0xEC	; 236
    2bd6:	34 ef       	ldi	r19, 0xF4	; 244
    2bd8:	4f ef       	ldi	r20, 0xFF	; 255
    2bda:	5f ef       	ldi	r21, 0xFF	; 255
    2bdc:	0e 94 c3 18 	call	0x3186	; 0x3186 <__mulsi3>
    2be0:	6e 0d       	add	r22, r14
    2be2:	7f 1d       	adc	r23, r15
    2be4:	80 1f       	adc	r24, r16
    2be6:	91 1f       	adc	r25, r17
    2be8:	97 ff       	sbrs	r25, 7
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <do_rand+0x84>
    2bec:	61 50       	subi	r22, 0x01	; 1
    2bee:	70 40       	sbci	r23, 0x00	; 0
    2bf0:	80 40       	sbci	r24, 0x00	; 0
    2bf2:	90 48       	sbci	r25, 0x80	; 128
    2bf4:	68 83       	st	Y, r22
    2bf6:	79 83       	std	Y+1, r23	; 0x01
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	3f 77       	andi	r19, 0x7F	; 127
    2c00:	c9 01       	movw	r24, r18
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	ea e0       	ldi	r30, 0x0A	; 10
    2c08:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x10>

00002c0c <rand_r>:
    2c0c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <do_rand>
    2c10:	08 95       	ret

00002c12 <rand>:
    2c12:	81 e6       	ldi	r24, 0x61	; 97
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <do_rand>
    2c1a:	08 95       	ret

00002c1c <srand>:
    2c1c:	a0 e0       	ldi	r26, 0x00	; 0
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	80 93 61 01 	sts	0x0161, r24
    2c24:	90 93 62 01 	sts	0x0162, r25
    2c28:	a0 93 63 01 	sts	0x0163, r26
    2c2c:	b0 93 64 01 	sts	0x0164, r27
    2c30:	08 95       	ret

00002c32 <memcpy_P>:
    2c32:	fb 01       	movw	r30, r22
    2c34:	dc 01       	movw	r26, r24
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <memcpy_P+0xa>
    2c38:	05 90       	lpm	r0, Z+
    2c3a:	0d 92       	st	X+, r0
    2c3c:	41 50       	subi	r20, 0x01	; 1
    2c3e:	50 40       	sbci	r21, 0x00	; 0
    2c40:	d8 f7       	brcc	.-10     	; 0x2c38 <memcpy_P+0x6>
    2c42:	08 95       	ret

00002c44 <sprintf>:
    2c44:	ae e0       	ldi	r26, 0x0E	; 14
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e8 e2       	ldi	r30, 0x28	; 40
    2c4a:	f6 e1       	ldi	r31, 0x16	; 22
    2c4c:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x1c>
    2c50:	0d 89       	ldd	r16, Y+21	; 0x15
    2c52:	1e 89       	ldd	r17, Y+22	; 0x16
    2c54:	86 e0       	ldi	r24, 0x06	; 6
    2c56:	8c 83       	std	Y+4, r24	; 0x04
    2c58:	1a 83       	std	Y+2, r17	; 0x02
    2c5a:	09 83       	std	Y+1, r16	; 0x01
    2c5c:	8f ef       	ldi	r24, 0xFF	; 255
    2c5e:	9f e7       	ldi	r25, 0x7F	; 127
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	9e 01       	movw	r18, r28
    2c66:	27 5e       	subi	r18, 0xE7	; 231
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c70:	78 8d       	ldd	r23, Y+24	; 0x18
    2c72:	a9 01       	movw	r20, r18
    2c74:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <vfprintf>
    2c78:	2f 81       	ldd	r18, Y+7	; 0x07
    2c7a:	38 85       	ldd	r19, Y+8	; 0x08
    2c7c:	02 0f       	add	r16, r18
    2c7e:	13 1f       	adc	r17, r19
    2c80:	f8 01       	movw	r30, r16
    2c82:	10 82       	st	Z, r1
    2c84:	2e 96       	adiw	r28, 0x0e	; 14
    2c86:	e4 e0       	ldi	r30, 0x04	; 4
    2c88:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x1c>

00002c8c <vfprintf>:
    2c8c:	ab e0       	ldi	r26, 0x0B	; 11
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ec e4       	ldi	r30, 0x4C	; 76
    2c92:	f6 e1       	ldi	r31, 0x16	; 22
    2c94:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__>
    2c98:	3c 01       	movw	r6, r24
    2c9a:	2b 01       	movw	r4, r22
    2c9c:	5a 01       	movw	r10, r20
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	17 82       	std	Z+7, r1	; 0x07
    2ca2:	16 82       	std	Z+6, r1	; 0x06
    2ca4:	83 81       	ldd	r24, Z+3	; 0x03
    2ca6:	81 fd       	sbrc	r24, 1
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <vfprintf+0x24>
    2caa:	6f ef       	ldi	r22, 0xFF	; 255
    2cac:	7f ef       	ldi	r23, 0xFF	; 255
    2cae:	c6 c1       	rjmp	.+908    	; 0x303c <vfprintf+0x3b0>
    2cb0:	9a e0       	ldi	r25, 0x0A	; 10
    2cb2:	89 2e       	mov	r8, r25
    2cb4:	1e 01       	movw	r2, r28
    2cb6:	08 94       	sec
    2cb8:	21 1c       	adc	r2, r1
    2cba:	31 1c       	adc	r3, r1
    2cbc:	f3 01       	movw	r30, r6
    2cbe:	23 81       	ldd	r18, Z+3	; 0x03
    2cc0:	f2 01       	movw	r30, r4
    2cc2:	23 fd       	sbrc	r18, 3
    2cc4:	85 91       	lpm	r24, Z+
    2cc6:	23 ff       	sbrs	r18, 3
    2cc8:	81 91       	ld	r24, Z+
    2cca:	2f 01       	movw	r4, r30
    2ccc:	88 23       	and	r24, r24
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <vfprintf+0x46>
    2cd0:	b2 c1       	rjmp	.+868    	; 0x3036 <vfprintf+0x3aa>
    2cd2:	85 32       	cpi	r24, 0x25	; 37
    2cd4:	39 f4       	brne	.+14     	; 0x2ce4 <vfprintf+0x58>
    2cd6:	23 fd       	sbrc	r18, 3
    2cd8:	85 91       	lpm	r24, Z+
    2cda:	23 ff       	sbrs	r18, 3
    2cdc:	81 91       	ld	r24, Z+
    2cde:	2f 01       	movw	r4, r30
    2ce0:	85 32       	cpi	r24, 0x25	; 37
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <vfprintf+0x62>
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	b3 01       	movw	r22, r6
    2ce8:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2cec:	e7 cf       	rjmp	.-50     	; 0x2cbc <vfprintf+0x30>
    2cee:	98 2f       	mov	r25, r24
    2cf0:	ff 24       	eor	r15, r15
    2cf2:	ee 24       	eor	r14, r14
    2cf4:	99 24       	eor	r9, r9
    2cf6:	ff e1       	ldi	r31, 0x1F	; 31
    2cf8:	ff 15       	cp	r31, r15
    2cfa:	d0 f0       	brcs	.+52     	; 0x2d30 <vfprintf+0xa4>
    2cfc:	9b 32       	cpi	r25, 0x2B	; 43
    2cfe:	69 f0       	breq	.+26     	; 0x2d1a <vfprintf+0x8e>
    2d00:	9c 32       	cpi	r25, 0x2C	; 44
    2d02:	28 f4       	brcc	.+10     	; 0x2d0e <vfprintf+0x82>
    2d04:	90 32       	cpi	r25, 0x20	; 32
    2d06:	59 f0       	breq	.+22     	; 0x2d1e <vfprintf+0x92>
    2d08:	93 32       	cpi	r25, 0x23	; 35
    2d0a:	91 f4       	brne	.+36     	; 0x2d30 <vfprintf+0xa4>
    2d0c:	0e c0       	rjmp	.+28     	; 0x2d2a <vfprintf+0x9e>
    2d0e:	9d 32       	cpi	r25, 0x2D	; 45
    2d10:	49 f0       	breq	.+18     	; 0x2d24 <vfprintf+0x98>
    2d12:	90 33       	cpi	r25, 0x30	; 48
    2d14:	69 f4       	brne	.+26     	; 0x2d30 <vfprintf+0xa4>
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	24 c0       	rjmp	.+72     	; 0x2d62 <vfprintf+0xd6>
    2d1a:	52 e0       	ldi	r21, 0x02	; 2
    2d1c:	f5 2a       	or	r15, r21
    2d1e:	84 e0       	ldi	r24, 0x04	; 4
    2d20:	f8 2a       	or	r15, r24
    2d22:	28 c0       	rjmp	.+80     	; 0x2d74 <vfprintf+0xe8>
    2d24:	98 e0       	ldi	r25, 0x08	; 8
    2d26:	f9 2a       	or	r15, r25
    2d28:	25 c0       	rjmp	.+74     	; 0x2d74 <vfprintf+0xe8>
    2d2a:	e0 e1       	ldi	r30, 0x10	; 16
    2d2c:	fe 2a       	or	r15, r30
    2d2e:	22 c0       	rjmp	.+68     	; 0x2d74 <vfprintf+0xe8>
    2d30:	f7 fc       	sbrc	r15, 7
    2d32:	29 c0       	rjmp	.+82     	; 0x2d86 <vfprintf+0xfa>
    2d34:	89 2f       	mov	r24, r25
    2d36:	80 53       	subi	r24, 0x30	; 48
    2d38:	8a 30       	cpi	r24, 0x0A	; 10
    2d3a:	70 f4       	brcc	.+28     	; 0x2d58 <vfprintf+0xcc>
    2d3c:	f6 fe       	sbrs	r15, 6
    2d3e:	05 c0       	rjmp	.+10     	; 0x2d4a <vfprintf+0xbe>
    2d40:	98 9c       	mul	r9, r8
    2d42:	90 2c       	mov	r9, r0
    2d44:	11 24       	eor	r1, r1
    2d46:	98 0e       	add	r9, r24
    2d48:	15 c0       	rjmp	.+42     	; 0x2d74 <vfprintf+0xe8>
    2d4a:	e8 9c       	mul	r14, r8
    2d4c:	e0 2c       	mov	r14, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	e8 0e       	add	r14, r24
    2d52:	f0 e2       	ldi	r31, 0x20	; 32
    2d54:	ff 2a       	or	r15, r31
    2d56:	0e c0       	rjmp	.+28     	; 0x2d74 <vfprintf+0xe8>
    2d58:	9e 32       	cpi	r25, 0x2E	; 46
    2d5a:	29 f4       	brne	.+10     	; 0x2d66 <vfprintf+0xda>
    2d5c:	f6 fc       	sbrc	r15, 6
    2d5e:	6b c1       	rjmp	.+726    	; 0x3036 <vfprintf+0x3aa>
    2d60:	40 e4       	ldi	r20, 0x40	; 64
    2d62:	f4 2a       	or	r15, r20
    2d64:	07 c0       	rjmp	.+14     	; 0x2d74 <vfprintf+0xe8>
    2d66:	9c 36       	cpi	r25, 0x6C	; 108
    2d68:	19 f4       	brne	.+6      	; 0x2d70 <vfprintf+0xe4>
    2d6a:	50 e8       	ldi	r21, 0x80	; 128
    2d6c:	f5 2a       	or	r15, r21
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <vfprintf+0xe8>
    2d70:	98 36       	cpi	r25, 0x68	; 104
    2d72:	49 f4       	brne	.+18     	; 0x2d86 <vfprintf+0xfa>
    2d74:	f2 01       	movw	r30, r4
    2d76:	23 fd       	sbrc	r18, 3
    2d78:	95 91       	lpm	r25, Z+
    2d7a:	23 ff       	sbrs	r18, 3
    2d7c:	91 91       	ld	r25, Z+
    2d7e:	2f 01       	movw	r4, r30
    2d80:	99 23       	and	r25, r25
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <vfprintf+0xfa>
    2d84:	b8 cf       	rjmp	.-144    	; 0x2cf6 <vfprintf+0x6a>
    2d86:	89 2f       	mov	r24, r25
    2d88:	85 54       	subi	r24, 0x45	; 69
    2d8a:	83 30       	cpi	r24, 0x03	; 3
    2d8c:	18 f0       	brcs	.+6      	; 0x2d94 <vfprintf+0x108>
    2d8e:	80 52       	subi	r24, 0x20	; 32
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	38 f4       	brcc	.+14     	; 0x2da2 <vfprintf+0x116>
    2d94:	44 e0       	ldi	r20, 0x04	; 4
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	a4 0e       	add	r10, r20
    2d9a:	b5 1e       	adc	r11, r21
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	59 83       	std	Y+1, r21	; 0x01
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <vfprintf+0x134>
    2da2:	93 36       	cpi	r25, 0x63	; 99
    2da4:	31 f0       	breq	.+12     	; 0x2db2 <vfprintf+0x126>
    2da6:	93 37       	cpi	r25, 0x73	; 115
    2da8:	79 f0       	breq	.+30     	; 0x2dc8 <vfprintf+0x13c>
    2daa:	93 35       	cpi	r25, 0x53	; 83
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <vfprintf+0x124>
    2dae:	56 c0       	rjmp	.+172    	; 0x2e5c <vfprintf+0x1d0>
    2db0:	20 c0       	rjmp	.+64     	; 0x2df2 <vfprintf+0x166>
    2db2:	f5 01       	movw	r30, r10
    2db4:	80 81       	ld	r24, Z
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	42 e0       	ldi	r20, 0x02	; 2
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	a4 0e       	add	r10, r20
    2dbe:	b5 1e       	adc	r11, r21
    2dc0:	61 01       	movw	r12, r2
    2dc2:	01 e0       	ldi	r16, 0x01	; 1
    2dc4:	10 e0       	ldi	r17, 0x00	; 0
    2dc6:	12 c0       	rjmp	.+36     	; 0x2dec <vfprintf+0x160>
    2dc8:	f5 01       	movw	r30, r10
    2dca:	c0 80       	ld	r12, Z
    2dcc:	d1 80       	ldd	r13, Z+1	; 0x01
    2dce:	f6 fc       	sbrc	r15, 6
    2dd0:	03 c0       	rjmp	.+6      	; 0x2dd8 <vfprintf+0x14c>
    2dd2:	6f ef       	ldi	r22, 0xFF	; 255
    2dd4:	7f ef       	ldi	r23, 0xFF	; 255
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <vfprintf+0x150>
    2dd8:	69 2d       	mov	r22, r9
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	42 e0       	ldi	r20, 0x02	; 2
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	a4 0e       	add	r10, r20
    2de2:	b5 1e       	adc	r11, r21
    2de4:	c6 01       	movw	r24, r12
    2de6:	0e 94 2e 18 	call	0x305c	; 0x305c <strnlen>
    2dea:	8c 01       	movw	r16, r24
    2dec:	5f e7       	ldi	r21, 0x7F	; 127
    2dee:	f5 22       	and	r15, r21
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <vfprintf+0x18e>
    2df2:	f5 01       	movw	r30, r10
    2df4:	c0 80       	ld	r12, Z
    2df6:	d1 80       	ldd	r13, Z+1	; 0x01
    2df8:	f6 fc       	sbrc	r15, 6
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <vfprintf+0x176>
    2dfc:	6f ef       	ldi	r22, 0xFF	; 255
    2dfe:	7f ef       	ldi	r23, 0xFF	; 255
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <vfprintf+0x17a>
    2e02:	69 2d       	mov	r22, r9
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	42 e0       	ldi	r20, 0x02	; 2
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	a4 0e       	add	r10, r20
    2e0c:	b5 1e       	adc	r11, r21
    2e0e:	c6 01       	movw	r24, r12
    2e10:	0e 94 23 18 	call	0x3046	; 0x3046 <strnlen_P>
    2e14:	8c 01       	movw	r16, r24
    2e16:	50 e8       	ldi	r21, 0x80	; 128
    2e18:	f5 2a       	or	r15, r21
    2e1a:	f3 fe       	sbrs	r15, 3
    2e1c:	07 c0       	rjmp	.+14     	; 0x2e2c <vfprintf+0x1a0>
    2e1e:	1a c0       	rjmp	.+52     	; 0x2e54 <vfprintf+0x1c8>
    2e20:	80 e2       	ldi	r24, 0x20	; 32
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	b3 01       	movw	r22, r6
    2e26:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2e2a:	ea 94       	dec	r14
    2e2c:	8e 2d       	mov	r24, r14
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	08 17       	cp	r16, r24
    2e32:	19 07       	cpc	r17, r25
    2e34:	a8 f3       	brcs	.-22     	; 0x2e20 <vfprintf+0x194>
    2e36:	0e c0       	rjmp	.+28     	; 0x2e54 <vfprintf+0x1c8>
    2e38:	f6 01       	movw	r30, r12
    2e3a:	f7 fc       	sbrc	r15, 7
    2e3c:	85 91       	lpm	r24, Z+
    2e3e:	f7 fe       	sbrs	r15, 7
    2e40:	81 91       	ld	r24, Z+
    2e42:	6f 01       	movw	r12, r30
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	b3 01       	movw	r22, r6
    2e48:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2e4c:	e1 10       	cpse	r14, r1
    2e4e:	ea 94       	dec	r14
    2e50:	01 50       	subi	r16, 0x01	; 1
    2e52:	10 40       	sbci	r17, 0x00	; 0
    2e54:	01 15       	cp	r16, r1
    2e56:	11 05       	cpc	r17, r1
    2e58:	79 f7       	brne	.-34     	; 0x2e38 <vfprintf+0x1ac>
    2e5a:	ea c0       	rjmp	.+468    	; 0x3030 <vfprintf+0x3a4>
    2e5c:	94 36       	cpi	r25, 0x64	; 100
    2e5e:	11 f0       	breq	.+4      	; 0x2e64 <vfprintf+0x1d8>
    2e60:	99 36       	cpi	r25, 0x69	; 105
    2e62:	69 f5       	brne	.+90     	; 0x2ebe <vfprintf+0x232>
    2e64:	f7 fe       	sbrs	r15, 7
    2e66:	08 c0       	rjmp	.+16     	; 0x2e78 <vfprintf+0x1ec>
    2e68:	f5 01       	movw	r30, r10
    2e6a:	20 81       	ld	r18, Z
    2e6c:	31 81       	ldd	r19, Z+1	; 0x01
    2e6e:	42 81       	ldd	r20, Z+2	; 0x02
    2e70:	53 81       	ldd	r21, Z+3	; 0x03
    2e72:	84 e0       	ldi	r24, 0x04	; 4
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0a c0       	rjmp	.+20     	; 0x2e8c <vfprintf+0x200>
    2e78:	f5 01       	movw	r30, r10
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	9c 01       	movw	r18, r24
    2e80:	44 27       	eor	r20, r20
    2e82:	37 fd       	sbrc	r19, 7
    2e84:	40 95       	com	r20
    2e86:	54 2f       	mov	r21, r20
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a8 0e       	add	r10, r24
    2e8e:	b9 1e       	adc	r11, r25
    2e90:	9f e6       	ldi	r25, 0x6F	; 111
    2e92:	f9 22       	and	r15, r25
    2e94:	57 ff       	sbrs	r21, 7
    2e96:	09 c0       	rjmp	.+18     	; 0x2eaa <vfprintf+0x21e>
    2e98:	50 95       	com	r21
    2e9a:	40 95       	com	r20
    2e9c:	30 95       	com	r19
    2e9e:	21 95       	neg	r18
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea6:	e0 e8       	ldi	r30, 0x80	; 128
    2ea8:	fe 2a       	or	r15, r30
    2eaa:	ca 01       	movw	r24, r20
    2eac:	b9 01       	movw	r22, r18
    2eae:	a1 01       	movw	r20, r2
    2eb0:	2a e0       	ldi	r18, 0x0A	; 10
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	0e 94 65 18 	call	0x30ca	; 0x30ca <__ultoa_invert>
    2eb8:	d8 2e       	mov	r13, r24
    2eba:	d2 18       	sub	r13, r2
    2ebc:	40 c0       	rjmp	.+128    	; 0x2f3e <vfprintf+0x2b2>
    2ebe:	95 37       	cpi	r25, 0x75	; 117
    2ec0:	29 f4       	brne	.+10     	; 0x2ecc <vfprintf+0x240>
    2ec2:	1f 2d       	mov	r17, r15
    2ec4:	1f 7e       	andi	r17, 0xEF	; 239
    2ec6:	2a e0       	ldi	r18, 0x0A	; 10
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	1d c0       	rjmp	.+58     	; 0x2f06 <vfprintf+0x27a>
    2ecc:	1f 2d       	mov	r17, r15
    2ece:	19 7f       	andi	r17, 0xF9	; 249
    2ed0:	9f 36       	cpi	r25, 0x6F	; 111
    2ed2:	61 f0       	breq	.+24     	; 0x2eec <vfprintf+0x260>
    2ed4:	90 37       	cpi	r25, 0x70	; 112
    2ed6:	20 f4       	brcc	.+8      	; 0x2ee0 <vfprintf+0x254>
    2ed8:	98 35       	cpi	r25, 0x58	; 88
    2eda:	09 f0       	breq	.+2      	; 0x2ede <vfprintf+0x252>
    2edc:	ac c0       	rjmp	.+344    	; 0x3036 <vfprintf+0x3aa>
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <vfprintf+0x272>
    2ee0:	90 37       	cpi	r25, 0x70	; 112
    2ee2:	39 f0       	breq	.+14     	; 0x2ef2 <vfprintf+0x266>
    2ee4:	98 37       	cpi	r25, 0x78	; 120
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <vfprintf+0x25e>
    2ee8:	a6 c0       	rjmp	.+332    	; 0x3036 <vfprintf+0x3aa>
    2eea:	04 c0       	rjmp	.+8      	; 0x2ef4 <vfprintf+0x268>
    2eec:	28 e0       	ldi	r18, 0x08	; 8
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	0a c0       	rjmp	.+20     	; 0x2f06 <vfprintf+0x27a>
    2ef2:	10 61       	ori	r17, 0x10	; 16
    2ef4:	14 fd       	sbrc	r17, 4
    2ef6:	14 60       	ori	r17, 0x04	; 4
    2ef8:	20 e1       	ldi	r18, 0x10	; 16
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	04 c0       	rjmp	.+8      	; 0x2f06 <vfprintf+0x27a>
    2efe:	14 fd       	sbrc	r17, 4
    2f00:	16 60       	ori	r17, 0x06	; 6
    2f02:	20 e1       	ldi	r18, 0x10	; 16
    2f04:	32 e0       	ldi	r19, 0x02	; 2
    2f06:	17 ff       	sbrs	r17, 7
    2f08:	08 c0       	rjmp	.+16     	; 0x2f1a <vfprintf+0x28e>
    2f0a:	f5 01       	movw	r30, r10
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	44 e0       	ldi	r20, 0x04	; 4
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	08 c0       	rjmp	.+16     	; 0x2f2a <vfprintf+0x29e>
    2f1a:	f5 01       	movw	r30, r10
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	bc 01       	movw	r22, r24
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	42 e0       	ldi	r20, 0x02	; 2
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	a4 0e       	add	r10, r20
    2f2c:	b5 1e       	adc	r11, r21
    2f2e:	a1 01       	movw	r20, r2
    2f30:	0e 94 65 18 	call	0x30ca	; 0x30ca <__ultoa_invert>
    2f34:	d8 2e       	mov	r13, r24
    2f36:	d2 18       	sub	r13, r2
    2f38:	8f e7       	ldi	r24, 0x7F	; 127
    2f3a:	f8 2e       	mov	r15, r24
    2f3c:	f1 22       	and	r15, r17
    2f3e:	f6 fe       	sbrs	r15, 6
    2f40:	0b c0       	rjmp	.+22     	; 0x2f58 <vfprintf+0x2cc>
    2f42:	5e ef       	ldi	r21, 0xFE	; 254
    2f44:	f5 22       	and	r15, r21
    2f46:	d9 14       	cp	r13, r9
    2f48:	38 f4       	brcc	.+14     	; 0x2f58 <vfprintf+0x2cc>
    2f4a:	f4 fe       	sbrs	r15, 4
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <vfprintf+0x2d0>
    2f4e:	f2 fc       	sbrc	r15, 2
    2f50:	05 c0       	rjmp	.+10     	; 0x2f5c <vfprintf+0x2d0>
    2f52:	8f ee       	ldi	r24, 0xEF	; 239
    2f54:	f8 22       	and	r15, r24
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <vfprintf+0x2d0>
    2f58:	1d 2d       	mov	r17, r13
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <vfprintf+0x2d2>
    2f5c:	19 2d       	mov	r17, r9
    2f5e:	f4 fe       	sbrs	r15, 4
    2f60:	0d c0       	rjmp	.+26     	; 0x2f7c <vfprintf+0x2f0>
    2f62:	fe 01       	movw	r30, r28
    2f64:	ed 0d       	add	r30, r13
    2f66:	f1 1d       	adc	r31, r1
    2f68:	80 81       	ld	r24, Z
    2f6a:	80 33       	cpi	r24, 0x30	; 48
    2f6c:	19 f4       	brne	.+6      	; 0x2f74 <vfprintf+0x2e8>
    2f6e:	99 ee       	ldi	r25, 0xE9	; 233
    2f70:	f9 22       	and	r15, r25
    2f72:	08 c0       	rjmp	.+16     	; 0x2f84 <vfprintf+0x2f8>
    2f74:	1f 5f       	subi	r17, 0xFF	; 255
    2f76:	f2 fe       	sbrs	r15, 2
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <vfprintf+0x2f8>
    2f7a:	03 c0       	rjmp	.+6      	; 0x2f82 <vfprintf+0x2f6>
    2f7c:	8f 2d       	mov	r24, r15
    2f7e:	86 78       	andi	r24, 0x86	; 134
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <vfprintf+0x2f8>
    2f82:	1f 5f       	subi	r17, 0xFF	; 255
    2f84:	0f 2d       	mov	r16, r15
    2f86:	f3 fc       	sbrc	r15, 3
    2f88:	14 c0       	rjmp	.+40     	; 0x2fb2 <vfprintf+0x326>
    2f8a:	f0 fe       	sbrs	r15, 0
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <vfprintf+0x320>
    2f8e:	1e 15       	cp	r17, r14
    2f90:	10 f0       	brcs	.+4      	; 0x2f96 <vfprintf+0x30a>
    2f92:	9d 2c       	mov	r9, r13
    2f94:	0b c0       	rjmp	.+22     	; 0x2fac <vfprintf+0x320>
    2f96:	9d 2c       	mov	r9, r13
    2f98:	9e 0c       	add	r9, r14
    2f9a:	91 1a       	sub	r9, r17
    2f9c:	1e 2d       	mov	r17, r14
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <vfprintf+0x320>
    2fa0:	80 e2       	ldi	r24, 0x20	; 32
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	b3 01       	movw	r22, r6
    2fa6:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2faa:	1f 5f       	subi	r17, 0xFF	; 255
    2fac:	1e 15       	cp	r17, r14
    2fae:	c0 f3       	brcs	.-16     	; 0x2fa0 <vfprintf+0x314>
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <vfprintf+0x32e>
    2fb2:	1e 15       	cp	r17, r14
    2fb4:	10 f4       	brcc	.+4      	; 0x2fba <vfprintf+0x32e>
    2fb6:	e1 1a       	sub	r14, r17
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <vfprintf+0x330>
    2fba:	ee 24       	eor	r14, r14
    2fbc:	04 ff       	sbrs	r16, 4
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <vfprintf+0x352>
    2fc0:	80 e3       	ldi	r24, 0x30	; 48
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	b3 01       	movw	r22, r6
    2fc6:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2fca:	02 ff       	sbrs	r16, 2
    2fcc:	1d c0       	rjmp	.+58     	; 0x3008 <vfprintf+0x37c>
    2fce:	01 fd       	sbrc	r16, 1
    2fd0:	03 c0       	rjmp	.+6      	; 0x2fd8 <vfprintf+0x34c>
    2fd2:	88 e7       	ldi	r24, 0x78	; 120
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e c0       	rjmp	.+28     	; 0x2ff4 <vfprintf+0x368>
    2fd8:	88 e5       	ldi	r24, 0x58	; 88
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <vfprintf+0x368>
    2fde:	80 2f       	mov	r24, r16
    2fe0:	86 78       	andi	r24, 0x86	; 134
    2fe2:	91 f0       	breq	.+36     	; 0x3008 <vfprintf+0x37c>
    2fe4:	01 ff       	sbrs	r16, 1
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <vfprintf+0x360>
    2fe8:	8b e2       	ldi	r24, 0x2B	; 43
    2fea:	01 c0       	rjmp	.+2      	; 0x2fee <vfprintf+0x362>
    2fec:	80 e2       	ldi	r24, 0x20	; 32
    2fee:	f7 fc       	sbrc	r15, 7
    2ff0:	8d e2       	ldi	r24, 0x2D	; 45
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	b3 01       	movw	r22, r6
    2ff6:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    2ffa:	06 c0       	rjmp	.+12     	; 0x3008 <vfprintf+0x37c>
    2ffc:	80 e3       	ldi	r24, 0x30	; 48
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	b3 01       	movw	r22, r6
    3002:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    3006:	9a 94       	dec	r9
    3008:	d9 14       	cp	r13, r9
    300a:	c0 f3       	brcs	.-16     	; 0x2ffc <vfprintf+0x370>
    300c:	da 94       	dec	r13
    300e:	f1 01       	movw	r30, r2
    3010:	ed 0d       	add	r30, r13
    3012:	f1 1d       	adc	r31, r1
    3014:	80 81       	ld	r24, Z
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	b3 01       	movw	r22, r6
    301a:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    301e:	dd 20       	and	r13, r13
    3020:	a9 f7       	brne	.-22     	; 0x300c <vfprintf+0x380>
    3022:	06 c0       	rjmp	.+12     	; 0x3030 <vfprintf+0x3a4>
    3024:	80 e2       	ldi	r24, 0x20	; 32
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	b3 01       	movw	r22, r6
    302a:	0e 94 39 18 	call	0x3072	; 0x3072 <fputc>
    302e:	ea 94       	dec	r14
    3030:	ee 20       	and	r14, r14
    3032:	c1 f7       	brne	.-16     	; 0x3024 <vfprintf+0x398>
    3034:	43 ce       	rjmp	.-890    	; 0x2cbc <vfprintf+0x30>
    3036:	f3 01       	movw	r30, r6
    3038:	66 81       	ldd	r22, Z+6	; 0x06
    303a:	77 81       	ldd	r23, Z+7	; 0x07
    303c:	cb 01       	movw	r24, r22
    303e:	2b 96       	adiw	r28, 0x0b	; 11
    3040:	e2 e1       	ldi	r30, 0x12	; 18
    3042:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__>

00003046 <strnlen_P>:
    3046:	fc 01       	movw	r30, r24
    3048:	05 90       	lpm	r0, Z+
    304a:	61 50       	subi	r22, 0x01	; 1
    304c:	70 40       	sbci	r23, 0x00	; 0
    304e:	01 10       	cpse	r0, r1
    3050:	d8 f7       	brcc	.-10     	; 0x3048 <strnlen_P+0x2>
    3052:	80 95       	com	r24
    3054:	90 95       	com	r25
    3056:	8e 0f       	add	r24, r30
    3058:	9f 1f       	adc	r25, r31
    305a:	08 95       	ret

0000305c <strnlen>:
    305c:	fc 01       	movw	r30, r24
    305e:	61 50       	subi	r22, 0x01	; 1
    3060:	70 40       	sbci	r23, 0x00	; 0
    3062:	01 90       	ld	r0, Z+
    3064:	01 10       	cpse	r0, r1
    3066:	d8 f7       	brcc	.-10     	; 0x305e <strnlen+0x2>
    3068:	80 95       	com	r24
    306a:	90 95       	com	r25
    306c:	8e 0f       	add	r24, r30
    306e:	9f 1f       	adc	r25, r31
    3070:	08 95       	ret

00003072 <fputc>:
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	8c 01       	movw	r16, r24
    307c:	eb 01       	movw	r28, r22
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	81 ff       	sbrs	r24, 1
    3082:	1b c0       	rjmp	.+54     	; 0x30ba <fputc+0x48>
    3084:	82 ff       	sbrs	r24, 2
    3086:	0d c0       	rjmp	.+26     	; 0x30a2 <fputc+0x30>
    3088:	2e 81       	ldd	r18, Y+6	; 0x06
    308a:	3f 81       	ldd	r19, Y+7	; 0x07
    308c:	8c 81       	ldd	r24, Y+4	; 0x04
    308e:	9d 81       	ldd	r25, Y+5	; 0x05
    3090:	28 17       	cp	r18, r24
    3092:	39 07       	cpc	r19, r25
    3094:	64 f4       	brge	.+24     	; 0x30ae <fputc+0x3c>
    3096:	e8 81       	ld	r30, Y
    3098:	f9 81       	ldd	r31, Y+1	; 0x01
    309a:	01 93       	st	Z+, r16
    309c:	f9 83       	std	Y+1, r31	; 0x01
    309e:	e8 83       	st	Y, r30
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <fputc+0x3c>
    30a2:	e8 85       	ldd	r30, Y+8	; 0x08
    30a4:	f9 85       	ldd	r31, Y+9	; 0x09
    30a6:	80 2f       	mov	r24, r16
    30a8:	09 95       	icall
    30aa:	89 2b       	or	r24, r25
    30ac:	31 f4       	brne	.+12     	; 0x30ba <fputc+0x48>
    30ae:	8e 81       	ldd	r24, Y+6	; 0x06
    30b0:	9f 81       	ldd	r25, Y+7	; 0x07
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	9f 83       	std	Y+7, r25	; 0x07
    30b6:	8e 83       	std	Y+6, r24	; 0x06
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <fputc+0x4c>
    30ba:	0f ef       	ldi	r16, 0xFF	; 255
    30bc:	1f ef       	ldi	r17, 0xFF	; 255
    30be:	c8 01       	movw	r24, r16
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	08 95       	ret

000030ca <__ultoa_invert>:
    30ca:	fa 01       	movw	r30, r20
    30cc:	aa 27       	eor	r26, r26
    30ce:	28 30       	cpi	r18, 0x08	; 8
    30d0:	51 f1       	breq	.+84     	; 0x3126 <__ultoa_invert+0x5c>
    30d2:	20 31       	cpi	r18, 0x10	; 16
    30d4:	81 f1       	breq	.+96     	; 0x3136 <__ultoa_invert+0x6c>
    30d6:	e8 94       	clt
    30d8:	6f 93       	push	r22
    30da:	6e 7f       	andi	r22, 0xFE	; 254
    30dc:	6e 5f       	subi	r22, 0xFE	; 254
    30de:	7f 4f       	sbci	r23, 0xFF	; 255
    30e0:	8f 4f       	sbci	r24, 0xFF	; 255
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	af 4f       	sbci	r26, 0xFF	; 255
    30e6:	b1 e0       	ldi	r27, 0x01	; 1
    30e8:	3e d0       	rcall	.+124    	; 0x3166 <__ultoa_invert+0x9c>
    30ea:	b4 e0       	ldi	r27, 0x04	; 4
    30ec:	3c d0       	rcall	.+120    	; 0x3166 <__ultoa_invert+0x9c>
    30ee:	67 0f       	add	r22, r23
    30f0:	78 1f       	adc	r23, r24
    30f2:	89 1f       	adc	r24, r25
    30f4:	9a 1f       	adc	r25, r26
    30f6:	a1 1d       	adc	r26, r1
    30f8:	68 0f       	add	r22, r24
    30fa:	79 1f       	adc	r23, r25
    30fc:	8a 1f       	adc	r24, r26
    30fe:	91 1d       	adc	r25, r1
    3100:	a1 1d       	adc	r26, r1
    3102:	6a 0f       	add	r22, r26
    3104:	71 1d       	adc	r23, r1
    3106:	81 1d       	adc	r24, r1
    3108:	91 1d       	adc	r25, r1
    310a:	a1 1d       	adc	r26, r1
    310c:	20 d0       	rcall	.+64     	; 0x314e <__ultoa_invert+0x84>
    310e:	09 f4       	brne	.+2      	; 0x3112 <__ultoa_invert+0x48>
    3110:	68 94       	set
    3112:	3f 91       	pop	r19
    3114:	2a e0       	ldi	r18, 0x0A	; 10
    3116:	26 9f       	mul	r18, r22
    3118:	11 24       	eor	r1, r1
    311a:	30 19       	sub	r19, r0
    311c:	30 5d       	subi	r19, 0xD0	; 208
    311e:	31 93       	st	Z+, r19
    3120:	de f6       	brtc	.-74     	; 0x30d8 <__ultoa_invert+0xe>
    3122:	cf 01       	movw	r24, r30
    3124:	08 95       	ret
    3126:	46 2f       	mov	r20, r22
    3128:	47 70       	andi	r20, 0x07	; 7
    312a:	40 5d       	subi	r20, 0xD0	; 208
    312c:	41 93       	st	Z+, r20
    312e:	b3 e0       	ldi	r27, 0x03	; 3
    3130:	0f d0       	rcall	.+30     	; 0x3150 <__ultoa_invert+0x86>
    3132:	c9 f7       	brne	.-14     	; 0x3126 <__ultoa_invert+0x5c>
    3134:	f6 cf       	rjmp	.-20     	; 0x3122 <__ultoa_invert+0x58>
    3136:	46 2f       	mov	r20, r22
    3138:	4f 70       	andi	r20, 0x0F	; 15
    313a:	40 5d       	subi	r20, 0xD0	; 208
    313c:	4a 33       	cpi	r20, 0x3A	; 58
    313e:	18 f0       	brcs	.+6      	; 0x3146 <__ultoa_invert+0x7c>
    3140:	49 5d       	subi	r20, 0xD9	; 217
    3142:	31 fd       	sbrc	r19, 1
    3144:	40 52       	subi	r20, 0x20	; 32
    3146:	41 93       	st	Z+, r20
    3148:	02 d0       	rcall	.+4      	; 0x314e <__ultoa_invert+0x84>
    314a:	a9 f7       	brne	.-22     	; 0x3136 <__ultoa_invert+0x6c>
    314c:	ea cf       	rjmp	.-44     	; 0x3122 <__ultoa_invert+0x58>
    314e:	b4 e0       	ldi	r27, 0x04	; 4
    3150:	a6 95       	lsr	r26
    3152:	97 95       	ror	r25
    3154:	87 95       	ror	r24
    3156:	77 95       	ror	r23
    3158:	67 95       	ror	r22
    315a:	ba 95       	dec	r27
    315c:	c9 f7       	brne	.-14     	; 0x3150 <__ultoa_invert+0x86>
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	61 05       	cpc	r22, r1
    3162:	71 05       	cpc	r23, r1
    3164:	08 95       	ret
    3166:	9b 01       	movw	r18, r22
    3168:	ac 01       	movw	r20, r24
    316a:	0a 2e       	mov	r0, r26
    316c:	06 94       	lsr	r0
    316e:	57 95       	ror	r21
    3170:	47 95       	ror	r20
    3172:	37 95       	ror	r19
    3174:	27 95       	ror	r18
    3176:	ba 95       	dec	r27
    3178:	c9 f7       	brne	.-14     	; 0x316c <__ultoa_invert+0xa2>
    317a:	62 0f       	add	r22, r18
    317c:	73 1f       	adc	r23, r19
    317e:	84 1f       	adc	r24, r20
    3180:	95 1f       	adc	r25, r21
    3182:	a0 1d       	adc	r26, r0
    3184:	08 95       	ret

00003186 <__mulsi3>:
    3186:	62 9f       	mul	r22, r18
    3188:	d0 01       	movw	r26, r0
    318a:	73 9f       	mul	r23, r19
    318c:	f0 01       	movw	r30, r0
    318e:	82 9f       	mul	r24, r18
    3190:	e0 0d       	add	r30, r0
    3192:	f1 1d       	adc	r31, r1
    3194:	64 9f       	mul	r22, r20
    3196:	e0 0d       	add	r30, r0
    3198:	f1 1d       	adc	r31, r1
    319a:	92 9f       	mul	r25, r18
    319c:	f0 0d       	add	r31, r0
    319e:	83 9f       	mul	r24, r19
    31a0:	f0 0d       	add	r31, r0
    31a2:	74 9f       	mul	r23, r20
    31a4:	f0 0d       	add	r31, r0
    31a6:	65 9f       	mul	r22, r21
    31a8:	f0 0d       	add	r31, r0
    31aa:	99 27       	eor	r25, r25
    31ac:	72 9f       	mul	r23, r18
    31ae:	b0 0d       	add	r27, r0
    31b0:	e1 1d       	adc	r30, r1
    31b2:	f9 1f       	adc	r31, r25
    31b4:	63 9f       	mul	r22, r19
    31b6:	b0 0d       	add	r27, r0
    31b8:	e1 1d       	adc	r30, r1
    31ba:	f9 1f       	adc	r31, r25
    31bc:	bd 01       	movw	r22, r26
    31be:	cf 01       	movw	r24, r30
    31c0:	11 24       	eor	r1, r1
    31c2:	08 95       	ret

000031c4 <__divmodsi4>:
    31c4:	97 fb       	bst	r25, 7
    31c6:	09 2e       	mov	r0, r25
    31c8:	05 26       	eor	r0, r21
    31ca:	0e d0       	rcall	.+28     	; 0x31e8 <__divmodsi4_neg1>
    31cc:	57 fd       	sbrc	r21, 7
    31ce:	04 d0       	rcall	.+8      	; 0x31d8 <__divmodsi4_neg2>
    31d0:	4b d0       	rcall	.+150    	; 0x3268 <__udivmodsi4>
    31d2:	0a d0       	rcall	.+20     	; 0x31e8 <__divmodsi4_neg1>
    31d4:	00 1c       	adc	r0, r0
    31d6:	38 f4       	brcc	.+14     	; 0x31e6 <__divmodsi4_exit>

000031d8 <__divmodsi4_neg2>:
    31d8:	50 95       	com	r21
    31da:	40 95       	com	r20
    31dc:	30 95       	com	r19
    31de:	21 95       	neg	r18
    31e0:	3f 4f       	sbci	r19, 0xFF	; 255
    31e2:	4f 4f       	sbci	r20, 0xFF	; 255
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255

000031e6 <__divmodsi4_exit>:
    31e6:	08 95       	ret

000031e8 <__divmodsi4_neg1>:
    31e8:	f6 f7       	brtc	.-4      	; 0x31e6 <__divmodsi4_exit>
    31ea:	90 95       	com	r25
    31ec:	80 95       	com	r24
    31ee:	70 95       	com	r23
    31f0:	61 95       	neg	r22
    31f2:	7f 4f       	sbci	r23, 0xFF	; 255
    31f4:	8f 4f       	sbci	r24, 0xFF	; 255
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	08 95       	ret

000031fa <__prologue_saves__>:
    31fa:	2f 92       	push	r2
    31fc:	3f 92       	push	r3
    31fe:	4f 92       	push	r4
    3200:	5f 92       	push	r5
    3202:	6f 92       	push	r6
    3204:	7f 92       	push	r7
    3206:	8f 92       	push	r8
    3208:	9f 92       	push	r9
    320a:	af 92       	push	r10
    320c:	bf 92       	push	r11
    320e:	cf 92       	push	r12
    3210:	df 92       	push	r13
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	ca 1b       	sub	r28, r26
    3224:	db 0b       	sbc	r29, r27
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	09 94       	ijmp

00003232 <__epilogue_restores__>:
    3232:	2a 88       	ldd	r2, Y+18	; 0x12
    3234:	39 88       	ldd	r3, Y+17	; 0x11
    3236:	48 88       	ldd	r4, Y+16	; 0x10
    3238:	5f 84       	ldd	r5, Y+15	; 0x0f
    323a:	6e 84       	ldd	r6, Y+14	; 0x0e
    323c:	7d 84       	ldd	r7, Y+13	; 0x0d
    323e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3240:	9b 84       	ldd	r9, Y+11	; 0x0b
    3242:	aa 84       	ldd	r10, Y+10	; 0x0a
    3244:	b9 84       	ldd	r11, Y+9	; 0x09
    3246:	c8 84       	ldd	r12, Y+8	; 0x08
    3248:	df 80       	ldd	r13, Y+7	; 0x07
    324a:	ee 80       	ldd	r14, Y+6	; 0x06
    324c:	fd 80       	ldd	r15, Y+5	; 0x05
    324e:	0c 81       	ldd	r16, Y+4	; 0x04
    3250:	1b 81       	ldd	r17, Y+3	; 0x03
    3252:	aa 81       	ldd	r26, Y+2	; 0x02
    3254:	b9 81       	ldd	r27, Y+1	; 0x01
    3256:	ce 0f       	add	r28, r30
    3258:	d1 1d       	adc	r29, r1
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	ed 01       	movw	r28, r26
    3266:	08 95       	ret

00003268 <__udivmodsi4>:
    3268:	a1 e2       	ldi	r26, 0x21	; 33
    326a:	1a 2e       	mov	r1, r26
    326c:	aa 1b       	sub	r26, r26
    326e:	bb 1b       	sub	r27, r27
    3270:	fd 01       	movw	r30, r26
    3272:	0d c0       	rjmp	.+26     	; 0x328e <__udivmodsi4_ep>

00003274 <__udivmodsi4_loop>:
    3274:	aa 1f       	adc	r26, r26
    3276:	bb 1f       	adc	r27, r27
    3278:	ee 1f       	adc	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	a2 17       	cp	r26, r18
    327e:	b3 07       	cpc	r27, r19
    3280:	e4 07       	cpc	r30, r20
    3282:	f5 07       	cpc	r31, r21
    3284:	20 f0       	brcs	.+8      	; 0x328e <__udivmodsi4_ep>
    3286:	a2 1b       	sub	r26, r18
    3288:	b3 0b       	sbc	r27, r19
    328a:	e4 0b       	sbc	r30, r20
    328c:	f5 0b       	sbc	r31, r21

0000328e <__udivmodsi4_ep>:
    328e:	66 1f       	adc	r22, r22
    3290:	77 1f       	adc	r23, r23
    3292:	88 1f       	adc	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	1a 94       	dec	r1
    3298:	69 f7       	brne	.-38     	; 0x3274 <__udivmodsi4_loop>
    329a:	60 95       	com	r22
    329c:	70 95       	com	r23
    329e:	80 95       	com	r24
    32a0:	90 95       	com	r25
    32a2:	9b 01       	movw	r18, r22
    32a4:	ac 01       	movw	r20, r24
    32a6:	bd 01       	movw	r22, r26
    32a8:	cf 01       	movw	r24, r30
    32aa:	08 95       	ret

000032ac <_exit>:
    32ac:	f8 94       	cli

000032ae <__stop_program>:
    32ae:	ff cf       	rjmp	.-2      	; 0x32ae <__stop_program>
